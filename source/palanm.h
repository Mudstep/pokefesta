#ifndef __PALANM_H__
#define __PALANM_H__

//=========================================================================
//	定数
//=========================================================================
#define FADE_END_WAIT	4//16	//ﾌｪｰﾄﾞ終了後の空ループ回数

#define PAL_ANM_MAX	16

#define PA_BEFORE	0
#define PA_AFTER	1
#define PA_NORMAL	PA_BEFORE
#define PA_NON_FADE	PA_AFTER

#define PA_ROM		0xffff

//----------------------------------------------------------
//	fade_type指定
//----------------------------------------------------------
enum{
	W_to_N,
	N_to_W,
	B_to_N,
	N_to_B,
};

//----------------------------------------------------------
//	PalAnmSeq
//----------------------------------------------------------
#define PA_LOOP		0
#define PA_END		1
#define PA_OUFUKU	2

//----------------------------------------------------------
//	パレット指定
//----------------------------------------------------------
#define PA_BG0		0
#define PA_BG1		(PA_BG0+16)
#define PA_BG2		(PA_BG1+16)
#define PA_BG3		(PA_BG2+16)
#define PA_BG4		(PA_BG3+16)
#define PA_BG5		(PA_BG4+16)
#define PA_BG6		(PA_BG5+16)
#define PA_BG7		(PA_BG6+16)
#define PA_BG8		(PA_BG7+16)
#define PA_BG9		(PA_BG8+16)
#define PA_BG10		(PA_BG9+16)
#define PA_BG11		(PA_BG10+16)
#define PA_BG12		(PA_BG11+16)
#define PA_BG13		(PA_BG12+16)
#define PA_BG14		(PA_BG13+16)
#define PA_BG15		(PA_BG14+16)

#define PA_OBJ0		(PA_BG15+16)
#define PA_OBJ1		(PA_OBJ0+16)
#define PA_OBJ2		(PA_OBJ1+16)
#define PA_OBJ3		(PA_OBJ2+16)
#define PA_OBJ4		(PA_OBJ3+16)
#define PA_OBJ5		(PA_OBJ4+16)
#define PA_OBJ6		(PA_OBJ5+16)
#define PA_OBJ7		(PA_OBJ6+16)
#define PA_OBJ8		(PA_OBJ7+16)
#define PA_OBJ9		(PA_OBJ8+16)
#define PA_OBJ10	(PA_OBJ9+16)
#define PA_OBJ11	(PA_OBJ10+16)
#define PA_OBJ12	(PA_OBJ11+16)
#define PA_OBJ13	(PA_OBJ12+16)
#define PA_OBJ14	(PA_OBJ13+16)
#define PA_OBJ15	(PA_OBJ14+16)

#define PA_COL0			0
#define PA_COL1			1
#define PA_COL2			2
#define PA_COL3			3
#define PA_COL4			4
#define PA_COL5			5
#define PA_COL6			6
#define PA_COL7			7
#define PA_COL8			8
#define PA_COL9			9
#define PA_COL10		10
#define PA_COL11		11
#define PA_COL12		12
#define PA_COL13		13
#define PA_COL14		14
#define PA_COL15		15


//=========================================================================
//	マクロ
//=========================================================================
//----------------------------------------------------------
//   AddPalAnm用
//	ﾊﾟﾚｯﾄNoからPA_*(BG*, OBJ*)を求める
//----------------------------------------------------------
#define BGPALNO_TO_PANO(pal_no)	((pal_no) << 4)	//BG用
#define OBJPALNO_TO_PANO(pal_no)	(((pal_no) << 4) + PA_OBJ0)

//----------------------------------------------------------
//	xx = ｾｯﾄする変数  bit = 何ﾋﾞｯﾄ目か
//----------------------------------------------------------
//#define BIT_SET(xx, bit)	((xx) |= 1 << (bit))
//----------------------------------------------------------
//	xx = ｹﾞｯﾄするpal_no
//----------------------------------------------------------
#define GET_PALNO_BIT(pal_no)	(1 << (pal_no >> 4))

//=========================================================================
//	構造体宣言
//=========================================================================
// --- ROM ---
typedef struct{
	u16 id_no;
	u16 *PalData;			//転送するｶﾗｰﾊﾟﾚｯﾄｱﾄﾞﾚｽ
	
	u16 type		:1;		//BEFORE:ｶﾗｰ加減算対象　　AFTER:ｶﾗｰ加減算非対象
	u16 pal_no		:9;		//0〜511
	u16 TransValue	:5;		//col_noから いくつまでのﾊﾟﾚｯﾄを対象とするか
	u16 			:1;

	u8  TransWaitDef;		//次のﾊﾟﾚｯﾄｱﾆﾒに移るまでのｳｪｲﾄ
	
	u8  TransValueLoopDef:5;	//何回転送を繰り返すか
	u8  PalAnmSeq	:3;		//ｱﾆﾒ終了後の処理

	u8  LoopWaitDef;		//ｱﾆﾒが全て終了してからPalAnmSeqの動作に移るまでの待ち時間
}PalAnmData;

// --- RAM ---
typedef struct{
	const PalAnmData *PalAnmDat;
	
	u32 pal_sw		:1;		//ﾊﾟﾚｯﾄｱﾆﾒ稼動ﾌﾗｸﾞ
	u32 pause		:1;
	u32 pal_no_def	:9;
	u32 pal_no		:10;
	u32 TransValueLoop	:7;
	u32 			:4;
	
	u8 TransWait;
	u8 LoopWait;
}PalAnmWorkData;

//ﾌｪｰﾄﾞｱｳﾄ、ｲﾝ ﾘｸｴｽﾄ用構造体
typedef struct{
	u32 fade_bit;	//ﾌｪｰﾄﾞさせるﾊﾟﾚｯﾄ 各ﾋﾞｯﾄがﾊﾟﾚｯﾄ番号に対応 ﾋﾞｯﾄ0=BG0 ﾋﾞｯﾄ16=OBJ0

	u16 wait		:6;
	u16 now_evy		:5;
	u16 end_evy		:5;

	u16 next_rgb	:15;
	u16 fade_sw		:1;		//稼動ﾌﾗｸﾞ  0:OFF  1:ON

	u8  wait_def	:6;
	u8  direction	:1;		//0:evy inc  1:evy dec
	u8  trans_stop	:1;		//0:ﾊﾟﾚｯﾄ転送許可   1:ﾊﾟﾚｯﾄ転送不許可 追加2001.07.02(月)
	
	u8	type		:2;		//0:通常のPaletteFadeReq  1:LiteFadeReq	2:RegisterFade
	u8	reset_flg	:1;		//RegisterFadeの時、処理終了時にﾚｼﾞｽﾀｰのﾘｾｯﾄをするか(0:しない 1:する)
	u8	hard_end	:1;		//RegisterFadeの時、次のｼﾝｸでのﾚｼﾞｽﾀ操作で終了を意味する
	u8	end_wait	:5;		//ﾌｪｰﾄﾞ終了後、一定Syncｳｪｲﾄ
	u8	fade_end	:1;		
	
	u8	bg_obj		:1;		//BG,OBJのどちらのﾃﾞｰﾀを転送するか
	u8	fade_value	:4;		//ﾌｪｰﾄﾞをする時の1SyncにEVYに対して加減算する値
	u8				:7;
	
	u8 dmmy;				//4ﾊﾞｲﾄ境界ｵﾌｾｯﾄ
}PlttFadeData;


//=========================================================================
//	データ
//=========================================================================
extern const PalAnmData DmmyPalAnmDat;

//=========================================================================
//	グローバル変数
//=========================================================================
extern u16 PaletteWork[];			//ｵﾘｼﾞﾅﾙ　　BG&OBJﾊﾟﾚｯﾄﾊﾞｯｸｱｯﾌﾟ
extern u16 PaletteWorkTrans[];		//転送用
extern PalAnmWorkData PalAnmWork[];	//パレットアニメ用ﾜｰｸ
extern PlttFadeData FadeData;		//ﾌｪｰﾄﾞｱｳﾄ、ｲﾝ用構造体
extern u32 PalAnmFadeBit;//ﾊﾟﾚｯﾄｱﾆﾒ、ﾌｪｰﾄﾞｲﾝ、ｱｳﾄさせるﾊﾟﾚｯﾄ 各ﾋﾞｯﾄがﾊﾟﾚｯﾄNoに対応



//=============================================================================
//	外部関数宣言
//=============================================================================

/*----------------------------------------------------------*/
/*	Vブランク中の処理										*/
/*	(Vブランク中に常にコールしてください）					*/
/*----------------------------------------------------------*/
extern void PaletteFadeTrans( void );

//=========================================================================
//	パレットアニメ		  ※ﾒｲﾝﾙｰﾌﾟ内で呼んでください
// 戻り値: 0=ﾌｪｰﾄﾞﾘｸｴｽﾄがかかってない、又はﾘｸｴｽﾄが終了した
//         1=ﾌｪｰﾄﾞ実行中
//         2=ﾌｪｰﾄﾞﾘｸｴｽﾄはかかっているがｳｪｲﾄ中なので(ﾌｪｰﾄﾞの)処理はしなかった
//      0xff=前回のﾘｸｴｽﾄﾃﾞｰﾀがまだ転送されていない
//=========================================================================
extern u8 PaletteAnime(void);

//----------------------------------------------------------
//	PLTT_VRAMのﾃﾞｰﾀを全てPaletteWorkにｺﾋﾟｰ
//----------------------------------------------------------
extern void PlttCopy(void);

//=========================================================================
//	パレットワークに圧縮されたパレットデータをセット
// 引数:*SrcAdrs = 圧縮されているﾃﾞｰﾀｱﾄﾞﾚｽ
// 		pal_no = 展開する場所(u16型の配列の添え字です)PA_BG0+PA_COL5  PA_OBJ3+PA_COL0 ...等
//		size = ﾊﾞｲﾄｻｲｽﾞ
//=========================================================================
extern void DecordPaletteWork(void *SrcAdrs, u16 pal_no, u16 size);
//=========================================================================
//	パレットワークに非圧縮のパレットデータをセット
//=========================================================================
extern void PaletteWorkSet(const u16 *pal_data, u16 pal_no, u16 size);
//=========================================================================
//	パレットワークを指定データでクリアする
// 引数: clear_data = このデータで領域を埋めます。
//		pal_no = ｸﾘｱｰする場所  PA_BG0+PA_COL5  PA_OBJ3+PA_COL0 ...等
//		size = ﾊﾞｲﾄｻｲｽﾞ
//=========================================================================
extern void PaletteWorkClear(u16 clear_data, u16 pal_no, u16 size);

//----------------------------------------------------------
//	パレット加減算リクエスト  ※ﾘｸｴｽﾄが重なった場合は先勝ちです
//
// fade_bit : パレットを指定（各ビットがパレット番号に対応
//			  ビット0 = BGの0パレット、 Bit16 = OBJの0パレット)
// wait : 値を大きくするとゆっくりﾌｪｰﾄﾞｱｳﾄ、ｲﾝします (MAX:63)
//		  値を小さくすると早くﾌｪｰﾄﾞｱｳﾄ、ｲﾝします。
// start_evy : 最初の色の濃度を指定します(0〜16)
// 			   0(元の色)〜2,3..(中間色)〜16(指定した色)
// end_evy : ﾌｪｰﾄﾞ計算後の最終的な色の濃度を指定します。引数の値は↑と同じです
// next_rgb : 変更後の色を指定
//
// 戻り値: 1=正常終了  0=ｴﾗｰ
//----------------------------------------------------------
extern u8 PaletteFadeReq(u32 fade_bit, s8 wait, u8 start_evy, u8 end_evy, u16 next_rgb);

//----------------------------------------------------------
//	PlttCopyをしてからPaletteFadeReqを実行
// 引数と戻り値の値はPaletteFadeReqと変わりません
//----------------------------------------------------------
extern u8 PaletteFadeReq2(u32 fade_bit, s8 wait, u8 start_evy, u8 end_evy, u16 next_rgb);

//=========================================================================
//	パレットアニメ メイン
//=========================================================================
extern void PaletteAnimeBeforeAfter(u8 trans_type, u32 *PalAnmBit);

//----------------------------------------------------------
//	指定したIDのパレットアニメを削除
//----------------------------------------------------------
extern void DelPalAnm(u16 id_no);

//----------------------------------------------------------
//	パレットアニメ単発初期化
//----------------------------------------------------------
extern void PalAnmInitWork(u8 pal_anm_no);

//----------------------------------------------------------
//	パレットアニメ全初期化
//----------------------------------------------------------
extern void PaletteAnimeInit(void);

//----------------------------------------------------------
//	指定したIDのパレットアニメを止める
// 登録されているPalAnmWorkの配列番号が分かっているなら直接いじった方が早い
//----------------------------------------------------------
extern void PalAnmPause(u16 id_no);

//----------------------------------------------------------
//	指定したIDのPauseで止めていたﾊﾟﾚｯﾄｱﾆﾒを動かす
// 登録されているPalAnmWorkの配列番号が分かっているなら直接いじった方が早い
//----------------------------------------------------------
extern void PalAnmMove(u16 id_no);

//----------------------------------------------------------
//	IDからPalAnmWorkの配列番号を出す
//----------------------------------------------------------
extern u8 PalAnmGetWorkNumber(u16 id_no);

//----------------------------------------------------------
//	ソフトフェードイン、アウト(ﾊﾟﾚｯﾄｱﾆﾒﾙｰﾁﾝ用)
//----------------------------------------------------------
extern u8 ColorAddSub(void);

//----------------------------------------------------------
//	ﾌｪｰﾄﾞﾘｸｴｽﾄﾜｰｸ初期化
//----------------------------------------------------------
extern void FadeWorkInit(void);


//=========================================================================
//	カラー反転						2001.06.26(火)
// 引数:　bit = カラー反転する対象ﾊﾟﾚｯﾄ   0bit:BGPalette0   16bit:ObjPalette0
//=========================================================================
extern void ColorReversal(u32 bit);



//=========================================================================
//	カラー加算						2001.06.29
// 引数:　bit = カラー加算する対象ﾊﾟﾚｯﾄ   0bit:BGPalette0   16bit:ObjPalette0
//        red = 指定ﾊﾟﾚｯﾄのredに対して入力された数字を加算
//      green =            green
//       blue =            blue
//=========================================================================
extern void ColorRandomPlus(u32 bit,s8 red,s8 green, s8 blue);


//=========================================================================
//	カラー加算の後始末					2001.06.29
// 引数:　bit = 戻す対象ﾊﾟﾚｯﾄ   0bit:BGPalette0   16bit:ObjPalette0
//=========================================================================
extern void ColorRandomPlusEnd(u32 bit);

//=========================================================================
//	黒と白のみに用途をしぼった高速フェード関数
// fade_type = どのﾌｪｰﾄﾞを行うか
//			   W_to_N:白→ﾉｰﾏﾙ  N_to_W:ﾉｰﾏﾙ→白  B_to_N:黒→ﾉｰﾏﾙ  N_to_B:ﾉｰﾏﾙ→黒
//=========================================================================
extern void LightFadeReq(u8 fade_type);

//----------------------------------------------------------
//	ハードによるパレット加減算リクエスト
//
// fade_bit : 加減算の対象にするBG,OBJを指定(BLDCNTﾚｼﾞｽﾀの第1対象ﾋﾟｸｾﾙに設定するﾋﾞｯﾄ)
//				6,7bit:光度変更ｱｯﾌﾟ、ﾀﾞｳﾝﾋﾞｯﾄ(10:UP	 11:DOWN)
//				5bit:BD(ﾊﾞｯｸｸﾞﾗｳﾝﾄﾞ), 4bit:OBJ, 3:BG3, 2:BG2, 1:BG1, 0:BG0
//
// wait : 値を大きくするとゆっくりﾌｪｰﾄﾞｱｳﾄ、ｲﾝします (MAX:63)
// start_evy : 最初の色の濃度を指定します(0〜16)
// 			   0(元の色)〜2,3..(中間色)〜16(黒、もしくは白)
// end_evy : 最終的な色の濃度を指定します。引数の値は↑と同じです
// reset_flg : ﾌｪｰﾄﾞ終了時にﾚｼﾞｽﾀｰの初期化をするか(0:しない  1:する)
//----------------------------------------------------------
extern void HardFadeReq(u8 fade_bit, u8 wait, u8 start_evy, u8 end_evy, u8 reset_flg);


//=========================================================================
//	指定ビットのカラーパレットを呼ばれた瞬間に指定色、指定濃度に変更する
//
// fade_bit : パレットを指定（各ビットがパレット番号に対応
//			  ビット0 = BGの0パレット、 Bit16 = OBJの0パレット)
// start_evy : 変更後の色の濃度を指定します(0〜16)
// 			   0(元の色)〜2,3..(中間色)〜16(指定した色)
// next_rgb : 変更後の色を指定
//=========================================================================
extern void ColorConceChange(u32 fade_bit, u8 evy, u16 next_rgb);


//=========================================================================
//	指定ビットのカラーパレットを呼ばれた瞬間に指定色、指定濃度に変更する
// ※指定されていないﾋﾞｯﾄのﾊﾟﾚｯﾄは元の色に戻ります。
// fade_bit : パレットを指定（各ビットがパレット番号に対応
//			  ビット0 = BGの0パレット、 Bit16 = OBJの0パレット)
// start_evy : 変更後の色の濃度を指定します(0〜16)
// 			   0(元の色)〜2,3..(中間色)〜16(指定した色)
// next_rgb : 変更後の色を指定
//=========================================================================
extern void ColorConceChange2(u32 fade_bit, u8 evy, u16 next_rgb);


#endif	//__PALANM_H__
