//=========================================================================================
//										キューブケース
//									2002/02/25 by nakahiro
//=========================================================================================
#ifndef	__CUBECASE_H__
#define	__CUBECASE_H__

//=========================================================================================
//										シンボル
//=========================================================================================
enum {
	BAG_CUBECASE_ID = 0,	// バッグ（フィールド）
	CNV_CUBECASE_ID,		// 便利ボタン
	BTL_CUBECASE_ID,		// バトル（サファリ）
	PUT_CUBECASE_ID,		// キューブ置き場
};

enum {
	PM_CUBE_TYPE = 0,	// 種類
	PM_CUBE_KARAI,		// 辛さ
	PM_CUBE_SIBUI,		// 渋さ
	PM_CUBE_AMAI,		// 甘さ
	PM_CUBE_NIGAI,		// 苦さ
	PM_CUBE_SUPPAI,		// 酸っぱさ
	PM_CUBE_UMAI,		// 旨さ
};

//=========================================================================================
//									グローバル変数
//=========================================================================================
extern const u8 * const cube_name[];	// キューブ名
extern const s8 cube_like_tbl[];		// 性格別・キューブの相性テーブル
extern const u8 cude_param_up[];		// 味で上がるパラメータ

extern const CellData CubeCase_Cell;	// キューブケースセルデータ
extern const PalData CubeCase_Pal;		// キューブケースパレットデータ


//=========================================================================================
//									プロトタイプ宣言
//=========================================================================================
extern void CubeCaseInit(void);		// 初期設定
extern void CubeCaseCall( u8 id );	// キューブケース呼び出し
extern void BtlCubeCaseCall(void);	// サファリの戦闘から呼び出し

//--------------------------------------
//		キューブのパラメータ初期化
//	引数 : 配列番号
//--------------------------------------
extern void CubeParamInit( u8 no );
extern void AllCubeParamInit(void);

//----------------------------------------------
//	キューブケースOBJセット
//----------------------------------------------
extern u8 CubeCaseActSet( s16 x, s16 y, u8 pri );

//------------------------------------------
//	キューブのレベル取得
//	引数   : キューブデータのポインタ
//	return : 一番高い数値の味
//------------------------------------------
extern u8 CubeLevelGet( CUBE * c );

//------------------------------------------
//	キューブのなめらかさ取得
//	引数   : キューブデータのポインタ
//	return : なめらかさ
//------------------------------------------
extern u8 CubeNamerakasaGet( CUBE * c );

//-------------------------------------------------
//				手持ちに空きがあるか
//	return : 空きあり = 配列番号	空き無し = -1
//-------------------------------------------------
extern s8 CheckCube(void);

//----------------------------------------
//			キューブを加える
//	引数   : 加えるデータのポインタ
//	戻り値 : 成功 = TRUE	失敗 = FALSE
//----------------------------------------
extern u8 AddCube( CUBE * add );

//----------------------------------------
//		キューブを減らす（無くす）
//	引数   : 配列番号
//	戻り値 : 成功 = TRUE	失敗 = FALSE
//----------------------------------------
extern u8 DelCube( u8 no );

//--------------------------------------
//		指定されたパラメータを取得
//--------------------------------------
extern s16 GetCubeParam( CUBE * c, u8 pm );

//------------------------------------------
//		選択キューブをポケモンが好きか
//------------------------------------------
extern s16	CheckCubeLike( u8 chr, CUBE * cube );

//------------------------------------------
//	キューブ名セット
//------------------------------------------
extern void SetCubeName( CUBE * c, u8 * str );

//------------------------------------------
//	好きなキューブを調べる（スクリプト用）
//	引数   : u8   chr = 性格
//		     u8 * str = キューブ名格納場所
//	戻り値 : TRUE  = 好きなキューブあり
//		   : FALSE = 好きなキューブなし
//------------------------------------------
extern u8 GetLikeCubeName( u8 chr, u8 * str );


#endif /*__CUBECASE_H__*/
