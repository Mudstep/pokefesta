#ifndef __EV_FIGHT_H__
#define __EV_FIGHT_H__


//=========================================================================
//	
//=========================================================================

#undef GLOBAL
#ifdef EV_FIGHT_H_GLOBAL
#define GLOBAL /*	*/
#else
#define GLOBAL extern
#endif

//=========================================================================
//	定義
//=========================================================================
//#define name value

//typedef ...

#define	REVENGE_STEP_MAX		255		/* 再戦歩数カウンタの最大値 */

#define REVENGE_LEVEL_MAX		5		/*　再戦の最大レベル */

/* 再戦データ定義 */
typedef struct {
	u16 id[REVENGE_LEVEL_MAX];
	u16	div_id,map_id;
}REVENGE_DATA;



//=========================================================================
//	変数
//=========================================================================
extern u16 FieldTrainerID;		// 対戦するトレーナーのＩＤ


//=========================================================================
//	関数プロトタイプ
//=========================================================================
//GLOBAL type function(arg...);

//--------------------------------------------------------------
//	ゲームオーバーになるかどうかの判定
//	<引数>		戦闘結果（WinLoseFlag)
//	<戻り値>	TRUE	ゲームオーバー
//				FALSE	プレイ継続
//--------------------------------------------------------------
GLOBAL int IsGameOverCheck( int value );

//--------------------------------------------------------------
//	視線ヒット動作の初期設定
//--------------------------------------------------------------
GLOBAL void SetTrainerMoveScript( u8 evno, const VM_CODE * label );

//--------------------------------------------------------------
//	フィールドトレーナーのパラメータをセット
//	<引数>
//	adr		トレーナーデータ先頭アドレス(スクリプトコマンド部より後ろ）
//--------------------------------------------------------------
GLOBAL u32 SetTrainerDataByAdrs( const VM_CODE * adr );

//--------------------------------------------------------------
//	フィールドトレーナー戦開始
//--------------------------------------------------------------
GLOBAL void FieldTrainerFightStart( void );

//--------------------------------------------------------------
//	フィールドトレーナー戦終了
//--------------------------------------------------------------
GLOBAL void FieldTrainerFightEnd( void );

//--------------------------------------------------------------
//	トレーナー対戦前のメッセージデータを返す
//--------------------------------------------------------------
GLOBAL const u8 * GetTrainerBeforeFightMsg( void );

//--------------------------------------------------------------
//	トレーナーが負けたときのメッセージデータを返す
//--------------------------------------------------------------
GLOBAL const u8 * GetTrainerLoseMessage( void );

//--------------------------------------------------------------
//	戦わない場合のメッセージデータを返す
//	※2vs2対戦用
//--------------------------------------------------------------
GLOBAL const u8 * GetTrainerNotFightMsg( void );

//--------------------------------------------------------------
//	トレーナー戦済みの場合のスクリプトを返す
//--------------------------------------------------------------
GLOBAL const VM_CODE * GetTrainerAfterScript( void );

//--------------------------------------------------------------
//	トレーナー戦終了直後のスクリプトを返す
//--------------------------------------------------------------
GLOBAL const VM_CODE * GetTrainerBattleEndScript( void );


//--------------------------------------------------------------
//	トレーナー対戦フラグのチェック
//--------------------------------------------------------------
GLOBAL int CheckTrainerFlagByAdrs( const VM_CODE * label );

//--------------------------------------------------------------
//	トレーナーIDからフラグを参照
//--------------------------------------------------------------
GLOBAL u8 CheckTrainerFlagByID( u16 id );
GLOBAL void SetTrainerFlagByID( u16 id );
GLOBAL void ResetTrainerFlagByID( u16 id );

//-------------------------------------------------------------------------
//	ランダムで再戦トレーナーを再戦状態にセットする
//	<引数>
//		div_id,map_id	マップの指定
//-------------------------------------------------------------------------
GLOBAL void SetRandomRevenger( u16 div_id, u16 map_id );

//-------------------------------------------------------------------------
//	再戦状態のトレーナーがいるかどうかのチェック
//	<引数>
//		div_id,map_id		マップの指定
//	<戻り値>
//		TRUE		存在する
//		FALSE		存在しない
//-------------------------------------------------------------------------
GLOBAL int CheckRevengerByMapID( u16 div_id, u16 map_id );

/* 再戦可能なトレーナーが存在するかどうかのチェック、デバッグ用 */
GLOBAL int DebugCheckRevengeDataByMapID( u16 div_id, u16 map_id );

//-------------------------------------------------------------------------
//	再戦トレーナーの対戦トレーナーIDを取得する
//	<引数>
//		再戦トレーナーのトレーナーID
//	<戻り値>
//		再戦する際のトレーナーID
//-------------------------------------------------------------------------
GLOBAL u16 GetRevengerTrainerID( u16 trainer_id );

//-------------------------------------------------------------------------
//	再戦フラグのクリア
//-------------------------------------------------------------------------
GLOBAL void ResetNowRevengerFlag( void );

//-------------------------------------------------------------------------
//	再戦チェック用歩数カウント
//-------------------------------------------------------------------------
GLOBAL void RevengeStepCountUp( void );

#undef GLOBAL
#endif	/*__EV_FIGHT_H__*/

