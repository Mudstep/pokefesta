#ifndef __MUS_TOOL_H__
#define __MUS_TOOL_H__

//=========================================================================
//	
//	サウンドツール関連
//
//		2001 GAME FREAK Inc.
//=========================================================================

#undef GLOBAL
#ifdef MUS_TOOL_H_GLOBAL
#define GLOBAL /*	*/
#else
#define GLOBAL extern
#endif


// フェードコマンド用のタイミング指定（大体の長さ）
enum{
	BGMFADE_HALF_SEC = 2,
	BGMFADE_1SEC = 4,
	BGMFADE_2SEC = 8,
};

//=========================================================================
//	グローバル変数
//=========================================================================
//	※サウンドシステム担当者以外は操作しないこと!!!
extern u8 BGMStopFlag;		//BGMのオンオフフラグ

//=========================================================================
//	関数プロトタイプ
//=========================================================================
//----------------------------------------------
//	BGMシステム初期化
//----------------------------------------------
GLOBAL void BGM_SystemInit( void );

//----------------------------------------------
//	ＢＧＭメイン（メインループ内におく）
//----------------------------------------------
GLOBAL void BGM_Main(void);

//----------------------------------------------
//	ＢＧＭ初期化
//----------------------------------------------
GLOBAL void BGM_Init( void );

//----------------------------------------------
//	現在のＢＧＭ取得
//	<戻り値>	現在のＢＧＭ番号
//----------------------------------------------
GLOBAL u16 BGM_GetNowNo( void );

//----------------------------------------------
//	ＢＧＭセット
//	<引数>	music	ＢＧＭの番号
//----------------------------------------------
GLOBAL void BGM_PlaySet( u16 music );

//----------------------------------------------
//	ＢＧＭをストップ
//----------------------------------------------
GLOBAL void BGM_PlayStop( void );

//----------------------------------------------
//	ＢＧＭフェードアウトセット
//	<引数> sec		フェード終了までの時間（指定値×16 / 60 秒 )
//----------------------------------------------
GLOBAL void BGM_FadeOutSet( u8 sec );

//----------------------------------------------
//	ＢＧＭフェードアウト→次のＢＧＭセット
//	<引数>	music	ＢＧＭの番号
//			sec		フェード終了までの時間（指定値×16 / 60 秒 )
//	※この命令を使用するとBGM_Main内でJingleWait->CheckTaskを
//	　呼ぶ。ジングル鳴らしっぱなし&タスクが回らない状況があると
//	　ハングアップするので注意！
//----------------------------------------------
GLOBAL void BGM_FadeNextSet( u16 music ,u8 sec );

//----------------------------------------------
//	ＢＧＭフェードアウト→次のＢＧＭフェードインセット
//	<引数>	music	ＢＧＭの番号
//			sec_out	フェード終了までの時間（指定値×16 / 60 秒 )
//			sec_in	フェードインの時間（指定値×16 / 60 秒 )
//	※この命令を使用するとBGM_Main内でJingleWait->CheckTaskを
//	　呼ぶ。ジングル鳴らしっぱなし&タスクが回らない状況があると
//	　ハングアップするので注意！
//----------------------------------------------
GLOBAL void BGM_FadeNextFadeSet( u16 music ,u8 sec_out, u8 sec_in );

//----------------------------------------------
//	ＢＧＭフェードインセット
//	<引数>	music	ＢＧＭの番号
//			sec		フェードインの時間（指定値×16 / 60 秒 )
//----------------------------------------------
GLOBAL void BGM_FadeInPlaySet( u16 music, u8 sec );

//----------------------------------------------
//	ＢＧＭフェードアウト中かどうかのチェック
//	<戻り値>	TRUE	フェードアウト中でない
//				FALSE	フェードアウト中
//----------------------------------------------
GLOBAL u8 BGM_FadeOutCheck( void );


//----------------------------------------------
//ミュージックエフェクト・リクエスト
//me_num … ＭＥナンバー
//----------------------------------------------
GLOBAL void MePlay( u8 me_num );

//----------------------------------------------
//ミュージックエフェクト終了待ち
//※事前に必ずMePlay()を呼ぶ！
// mode … 0=MePlayで一時停止したＢＧＭを再開
//         1=MePlayで一時停止したＢＧＭを再開しない
// return … 0=ＭＥ演奏中 1=ＭＥ演奏終了
//----------------------------------------------
GLOBAL u8 MeWait( u8 mode );

//----------------------------------------------
//	ＭＥを止める
//----------------------------------------------
GLOBAL void MeStop( u8 me_num );

//----------------------------------------------
//簡単ジングル開始
//----------------------------------------------
GLOBAL void JinglePlay( u16 music );

//----------------------------------------------
//簡単ジングル待ち
//<戻り値>	0	演奏中
//			1	終了
//----------------------------------------------
GLOBAL u8 JingleWait(void);


//----------------------------------------------
//	BGMフェードインセット
//	※曲がなっていない状態からいきなりフェードインする
//	<引数>		music	指定曲ナンバー
//				sec		フェードタイミング
//----------------------------------------------
GLOBAL void MusicFadeInPlay( u16 music, u8 sec );

//----------------------------------------------
//	BGMフェードアウト→ポーズ　セット
//	※終了ではなく、内部的にはポーズ状態になっている
//	<引数>		sec		フェードタイミング
//----------------------------------------------
GLOBAL void MusicFadeOutPause( u8 sec );

//----------------------------------------------
//	ＢＧＭフェードアウト→ポーズ　待ち
//	※MusicFadeOutPauseの処理が終わるのを待つ
//	<戻り値>	TRUE	終了
//				FALSE	フェード中
//----------------------------------------------
GLOBAL u8 MusicFadeOutPauseWait(void);

//----------------------------------------------
//	ＢＧＭフェードインセット
//	※MusicFadeOutPauseでフェードアウト→ポーズ状態に
//	　なっている曲をもう一度フェードインで再開する
//<引数> 	フェード終了までの時間（指定値×16 / 60 秒 )
//----------------------------------------------
GLOBAL void MusicFadeInContinue( u8 sec );

//----------------------------------------------
//	ＢＧＭフェードアウトセット
//	※フェードアウト後、終了させる
//	<引数>		sec		フェードタイミング
//----------------------------------------------
GLOBAL void MusicFadeOutEnd( u8 sec );

//----------------------------------------------
//	ＢＧＭフェードアウト終了待ち
//	<戻り値>	TRUE	終了
//				FALSE	フェード中
//----------------------------------------------
GLOBAL u8 MusicFadeOutEndWait(void);

//----------------------------------------------
//簡単鳴き声再生
//----------------------------------------------
GLOBAL void VoicePlay( u16 no, s8 pan );
GLOBAL void VoicePlay2( u16 no, s8 pan, s8 vol, u8 pri );
GLOBAL void VoicePlay3( u16 no, s8 pan, u8 ptn );
GLOBAL void VoicePlayEvent( u16 no, u8 ptn );
GLOBAL void VoicePlaySub( u16 no, s8 pan, s8 vol, u8 pri, u8 ptn );
GLOBAL void VoicePlay4( u16 no, s8 pan, u8 ptn );

//----------------------------------------------
//簡単鳴き声再生終了待ち
//<戻り値>	0	演奏中
//			1	終了
//----------------------------------------------
GLOBAL u8 VoicePlayWait( void );

//----------------------------------------------
//鳴き声強制停止
//----------------------------------------------
GLOBAL void VoicePlayStop( void );

//----------------------------------------------
//鳴き声の再生終了を調べる
//----------------------------------------------
//返り値
// 0…終了している
// 1…再生中
GLOBAL u8 VoiceEndCheck( void );

//----------------------------------------------
//BGM再生
//----------------------------------------------
GLOBAL void MusicPlay( u16 no );

//----------------------------------------------
//SE再生
//----------------------------------------------
GLOBAL void SePlay( u16 no );

//----------------------------------------------
//SE再生（パン付き）
//----------------------------------------------
GLOBAL void SePlayPan( u16 no, s8 pan );

//----------------------------------------------
//SE再生（チャンネル1のみのパンつき）
//----------------------------------------------
GLOBAL void SePlayPanCh1( u16 no, s8 pan );

//----------------------------------------------
//SE再生（チャンネル２のみのパンつき）
//----------------------------------------------
GLOBAL void SePlayPanCh2( u16 no, s8 pan );

//----------------------------------------------
//SEのパンのみ変更（SE再生中のみ有効）
//----------------------------------------------
GLOBAL void SePan( s8 pan );

//----------------------------------------------
//SEの再生終了を調べる
//----------------------------------------------
//返り値
// 0…終了している
// 1…再生中
GLOBAL u8 SeEndCheck( void );
GLOBAL u8 SeEndCheckPlayer003( void );
GLOBAL u8 MusEndCheck( void );



#undef GLOBAL
#endif	/*__MUS_TOOL_H__*/

