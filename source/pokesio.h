/********************************************************************/
/*        ポケモン通信用コマンド定義                                */
/*																	*/
/*																	*/
/*											GameFreak inc.			*/
/*											by Akito Mori			*/
/********************************************************************/
/*==================================================================*/

//#define DEBUG_CARD_E

//---------------------------------------------------------------------
//通信コマンド
//
//  SendBuf[0]に格納されます。
//---------------------------------------------------------------------


#define NINSHOU_REQ				(0x2222)		//通信開始時認証返信コマンド
#define SEND_KEYDATA			(0x4444)		//キーデータ送信コマンド
#define SEND_POSITION_DATA		(0x5555)		//初期位置送信コマンド
#define RECV_POSITION_DATA		(0x5566)		//初期位置データ受信通知
#define SEND_SYNCHRO_KEYDATA	(0x6666)		//キーデータ送信コマンド
#define TESTDATA_SEND			(0x7777)		//テストデータ送信コマンド
#define SPLITDATA_SEND			(0x8888)		//分割データ送信コマンド
#define SPLITDATA_FINISH		(0x8899)		//分割データ受信終了通知コマンド
#define SPLITDATA_NON_FINISH	(0x8877)		//分割データ受信非終了通知コマンド
#define SEND_ITEM_START			(0xAAAA)		//選択アイテム送信コマンド
#define SEND_ITEM_DATA			(0xAAAB)		//選択アイテム送信コマンド
#define NUMEROUS_SEND			(0xBBBB)		//大容量データ転送コマンド
#define EXCHANGE_DATA			(0xcccc)		//大量データ交換コマンド
#define SEND_FLDCMD_DATA		(0xcafe)		//フィールド操作コード交換コマンド
#define SIO_END_DATA			(0x5fff)		//エンドデータ
#define USER_COMMAND			(0x2fff)		//この後ろにユーザーは自由に定義をしていい

//---------------------------------------------------------------------
//通信用定義
//
//  SendBuf[1]に格納されます。
//---------------------------------------------------------------------
#define NINSHOU_NUMBER			(0x1234)		//認証返信用固有データ(返信する時にこいつをつける)

#define NINSHOU_KOUKAN			(0x1111)		//こうかん部屋に入るチェック用データ
#define NINSHOU_KOUKANGAMEN		(0x1122)		//こうかん画面
#define NINSHOU_KOUKANENTER		(0x1133)		//こうかん部屋
#define NINSHOU_KOUKANDEMO		(0x1144)
#define NINSHOU_BATTLEROOM		(0x2211)
#define NINSHOU_BATTLEROOM2		(0x2222)
#define NINSHOU_BATTLE1VS1		(0x2233)		//対戦部屋に入るチェック用データ（1vs1用）
#define NINSHOU_BATTLE2VS2		(0x2244)		//対戦部屋に入るチェック用データ（2vs2用）
#define NINSHOU_BATTLE_MULTI	(0x2255)		//対戦部屋に入るチェック用データ（2vs2用）
#define NINSHOU_RECORD_ENTER	(0x3311)		//レコードコーナー入り口チェック
#define NINSHOU_RECORD_CORNER	(0x3322)
#define NINSHOU_RECORD_MACHINE	(0x3333)
#define NINSHOU_BLEND_ENTER		(0x4411)		//ブレンドマシン入り口チェック
#define NINSHOU_BLEND_GAME		(0x4422)		//ブレンドマシンゲームー
#define NINSHOU_CARD_E			(0x5501)		//カードＥと通信
#define NINSHOU_CONTEST			(0x6601)		//コンテスト認証番号(かっこよさ)

#define	ID_0	(0x01)
#define	ID_1	(0x02)
#define	ID_2	(0x04)
#define	ID_3	(0x08)


#define COMPANY_NAME	("GameFreak inc.")

#define POKEMON_GENERATION_CODE	(0x4000)		//ポケモン世代設定コード
												//上位8bitが世代をあらわしている
												//0x40と真中を設定することで
												//赤緑は0x20,金銀は0x30など若い数字で過去と設定でき
												//AGBの次バージョンは0x50と設定して未来と判断できる

#define ZENKOKUZUKAN_OPEN_CODE	(0x8000)		//全国図鑑オープンコード
#define ZUKAN_CODE				(0x0000)		//このバージョンで入れる図鑑コード
												//（ルビー・サファイアは全国図鑑を開かない）


#define  WAIT_MULTISIO_START    (5)				//
#define  SEND_SYNCRO_DATA		(0x2ffe)		//通信同期用の定義

//---------------------------------------------------------------------
//---------------------------------------------------------------------
//分割転送時、一回の送信で送るデータのｻｲｽﾞ
#define SPLITDATA_BLOCK_SIZE	(BUFFER_SIZE-2)

#define SPLITDATA_POOL_SIZE			(256)

/*----------------------------------------------------------------------*/
/*送信パケット情報														*/
//
//
//このデータはSendBuf[1]に格納されます。
/*----------------------------------------------------------------------*/
typedef struct{
	u16 NowPacket:6;		//現在のパケット番号
	u16 EndPacket:6;		//分割送信回数
	u16 ClientBit:4;		//送信先ID
}PACKET_INFORMATION;		

/*----------------------------------------------------------------------*/
/*分割送信データ情報*/
/*----------------------------------------------------------------------*/
typedef struct{
	const u8 *pointer;		//送信データのポインタ
	u16 size;				//送信データのｻｲｽﾞ
	u16 checksum;			//チェックサム
	u8  EndPacket;			//分割送信回数
	u8	NowPacket;			//現在のパケット番号
	u8	ClientBit;			//送信先ID
}SPLITDATA_INFO;

/*----------------------------------------------------------------------*/
/*ポケモン通信基本トレーナー情報										*/
/*																		*/
/*ポケモン用の通信初期化をしたときに取得する情報						*/
/*																		*/
/*----------------------------------------------------------------------*/
typedef struct{
	u16 Version;			//カセットのバージョン(ルビー・サファイア・カードＥ・ＧＣ)
	u16 ExtraCode;			//追加コード
	u32 Id;					//ID
	u8  name[11];			//トレーナー名
	u8	sex;				//性別
	u32 ninshou;			//シーン認証番号
	u16 StandPos;			//立ち位置
	u16 INCode;				//国際コード
}SIOTRAINER_INFO;


typedef struct{				//実際に送信するデータ（前後に「GameFreak inc.」と挿入）
	u8 				CompanyName1[16];
	SIOTRAINER_INFO STInfo;
	u8 				CompanyName2[16];
}SEND_SIO_CODE;

//-------------------------------------------------------------------------
//  ポケモン用マルチプレイ通信初期化
//-------------------------------------------------------------------------
extern void PokemonMultiSioInit();


//-------------------------------------------------------------------------
//  ポケモン用マルチプレイ通信終了関数
//
//
//  通信割り込みストップ・フラグが初期化されます
//-------------------------------------------------------------------------
extern void PokemonMultiSioEnd();



/*----------------------------------------------------------------------------------*/
/*データ分割転送開始コマンド発行関数												*/
//
//入力
//  buf:	送信データ格納ポインタ
//  size:	送信データサイズ（最高256ﾊﾞｲﾄ）
//	
//返り値
//  登録成功の場合はSUCCESS,通信実行中はBUSY（再登録が必要）
/*----------------------------------------------------------------------------------*/
extern u8 SplitDataSendStart(u8 SendTo, u8 *buf,u16 size);






/*----------------------------------------------------------------------------------*/
//  分割通信ルーチンの終了時に指定のアドレスにデータをコピーする
//
//  まだテスト中ですが、分割送信コマンドでデータが送られてきた際に、
//  この関数でアドレスを指定しておくとデータがコピーされます。
//
//
//（注意）テスト中なので使わないでください
/*----------------------------------------------------------------------------------*/
extern void SplistDataCopyAddressSet(u8*	address);



/*----------------------------------------------------------------------------------*/
/*データ分割通信時のフラグを返す													*/
/*																					*/
/*	0:処理中または処理無し															*/
/*	0以外:対応したIDからの受信終了													*/
//  
//  分割送信コマンドを使用してデータ通信が行われると終了時にフラグが立ちます。
//  IDに対応したﾋﾞｯﾄが立つようになりました。		01/11/某日
//  値はORされていきます。
//  (例 )返り値=01:ID0からのﾃﾞｰﾀ受信が終了
//  (例2)返り値=06:ID1とID2からのﾃﾞｰﾀ受信が終了
//  
//  対応したIDのﾋﾞｯﾄのみを落としたいときはSplitDataResultReset2()を使ってください
/*----------------------------------------------------------------------------------*/
extern u8 SplitDataResult();


/*----------------------------------------------------------------------------------*/
/*データ分割送信関数を宣言できるかどうかを調査する									*/
/*	0:宣言できない	1:宣言できる													*/
/*----------------------------------------------------------------------------------*/
extern u8 SplitDataSendStatus();


/*----------------------------------------------------------------------------------*/
/*データ分割通信時のフラグをリセットする											*/
/*----------------------------------------------------------------------------------*/
extern void SplitDataResultReset();

/*----------------------------------------------------------------------------------*/
/*データ分割通信時のフラグをID単位でリセットする									*/
/**/
/*  SplitDataResult関数の仕様変更に伴って追加*/
/*----------------------------------------------------------------------------------*/
extern void SplitDataResultReset2(u8 id);


/*----------------------------------------------------------------------------------*/
/*マルチプレイ通信時に自分のIDを取得する											*/
/*																					*/
/*																					*/
/*返り値：０〜３																	*/
/*　　　　０の時は通信の親です。（ホストとは限りません）							*/
/*----------------------------------------------------------------------------------*/
extern u8 GetSioConnectId();

/*----------------------------------------------------------------------------------*/
/*自分以外の送信先を取得する(SplitDataSendStart用です)								*/
//
//
//返り値：自分以外の送信先
/*----------------------------------------------------------------------------------*/
extern u8 GetAnotherSendTo();


/*----------------------------------------------------------------------------------*/
/*  現在通信接続している人数を返します。											*/
/*																					*/
/*																					*/
/*  pokemon_fio_flagが1になった事を確認してから実行してください.					*/
/*----------------------------------------------------------------------------------*/
extern u8 GetConnectSioMenberNum();


/*----------------------------------------------------------------------------------*/
/*  現在通信接続しているトレーナーのIDを返します									*/
/*																					*/
/*	ID = id[0]|id[1]<<8|id[2]|<<16|id[3]<<24のように取得しています					*/
/*  並び替えの参考にしてください													*/
/*  ちなみに自分のIDの取れます。													*/
/*----------------------------------------------------------------------------------*/
extern u32 GetSioTrainerId(u8 id);

extern u8 SplitDataExchangeStart(u8 TransNo);


/*--------------------------------------------------------------------------*/
/*  通信の親の場合に通信をスタートさせる				*/
/*--------------------------------------------------------------------------*/
extern void MultiSioSignalDecision();


/*----------------------------------------------------------------------------------*/
/*  現在接続している人数を保持させる												*/
/*----------------------------------------------------------------------------------*/
extern void SetSioReliableNumber(u8 num);

/*----------------------------------------------------------------------------------*/
/*  さっきまで接続していた人数を取得する											*/
/*----------------------------------------------------------------------------------*/
extern u8 GetSioReliableNumber();

/*----------------------------------------------------------------------------------*/
/*  さっきまで接続していた時のＩＤを返す											*/
/*----------------------------------------------------------------------------------*/
extern u8 GetSioReliableId();

/*----------------------------------------------------------------------------------*/
/*  さっきまで接続していた人数をｸﾘｱする												*/
/*----------------------------------------------------------------------------------*/
extern void ClearSioReliableNumber();


/*----------------------------------------------------------------------------------*/
/*  現在(リアルタイムで)接続している人数を返す										*/
/*																					*/
/*	GetConnectSioMenberNum()とは違ってリアルタイムに								*/
/*  接続人数を監視するために存在します。											*/
/*----------------------------------------------------------------------------------*/
extern u8 GetSioRealConnectNumber();

/*----------------------------------------------------------------------------------*/
/*  親接続か子接続か																*/
/*----------------------------------------------------------------------------------*/
extern u8 GetMyConnectIsParent();

/*----------------------------------------------------------------------------------*/
/*  通信ﾎﾟｰｽﾞを監視してFIFOが解消されたらﾎﾟｰｽﾞ解除									*/
/*----------------------------------------------------------------------------------*/
extern void PokemonSioPauseCheck();

/*----------------------------------------------------------------------------------*/
/*  通信用FIFOﾊﾞｯﾌｧをｸﾘｱする														*/
/*  																				*/
/*  PAUSE機能を使用してFIFOﾊﾞｯﾌｧをｸﾘｱする。											*/
/*  multisio.hで定義しているBUFFER_SIZE分のVSyncをPAUSE状態で待った後、				*/
/*  通信を復帰させる																*/
/*----------------------------------------------------------------------------------*/
extern void PokemonSioFifoClear();

/*----------------------------------------------------------------------------------*/
/*  通信用FIFOﾊﾞｯﾌｧｸﾘｱ中かどうかを返す												*/
/*																					*/
/*  1:ｸﾘｱしてﾎﾟｰｽﾞがかかっている途中												*/
/*  0:通信回復																		*/
/*----------------------------------------------------------------------------------*/
extern u8 GetPokemonSioPauseFlag();


/*----------------------------------------------------------------------------------*/
/*  現在接続中の人数をビットで表した数で返す										*/
/*																					*/
/*																					*/
/*	接続しているIDのビットが1になった1bypeデータが返る								*/
/*----------------------------------------------------------------------------------*/
extern u8 GetConnectMemberBitData();


/*----------------------------------------------------------------------------------*/
/*  通信同時歩き回り中の立ち位置をセットする関数									*/
/*																					*/
/*	num:自分の立ち位置が何番かを渡す（0-3）											*/
/*----------------------------------------------------------------------------------*/
extern void SetMyTrainerInfoStandPos(u8 num);


// =================================================================
// SetEndDataStart
// 概要  : 終了コマンド発行を開始する
//
//			通信を終了させるときに呼ぶ。
//			pokemon_sio_flagが0になったら通信が終了したとみなしていい。
//
// 引数  : none
// 戻り値: none
// =================================================================
extern void SetSioEndDataStart();


// =================================================================
// SetSioPauseStart
// 概要  : ポーズ機能の開始
// 引数  : none
// 戻り値: none
// =================================================================
extern void SetSioPauseStart();

// =================================================================
// SetSioPauseStart
// 概要  : ポーズ機能の開始
// 引数  : none
// 戻り値: none
// =================================================================
extern void SetSioPause2Start();


// =================================================================
// MultiSioFunctionClear
// 概要  : PokemonMultiSioFuncにNULLを代入する(無理やり書き換えます)
// 引数  : none
// 戻り値: u8	0:正常		1:異常（抜かれた）
// =================================================================
extern void MultiSioFunctionClear();

// =================================================================
// SioParentConnectCheck
// 概要  : ケーブルが抜かれていないかチェック（通信の親の場合のみ）
// 引数  : none
// 戻り値: 0:正常		1:子供のはずなのに親のコネクタが差しこまれた
// =================================================================
extern u8 SioParentConnectCheck(void);

// =================================================================
// SioChileConnectCheck
// 概要  : ケーブルが差し替えられていないかチェック（子の場合のみ）
// 引数  : none
// 戻り値: u8
// =================================================================
extern u8 SioChildConnectCheck(void);

// =================================================================
// MultiSioMainCheck
// 概要  : 通信メイン中かチェック
// 引数  : none
// 戻り値: 0:通信無し		1:通信中
// =================================================================
u8 MultiSioMainCheck(void);



#define SIO_ERROR_PERMIT_JUMP	0			//通信エラーが起きたらエラー画面に強制ジャンプ
#define SIO_ERROR_NO_JUMP		1			//通信エラーが起きてもエラー画面には飛ばさない
// =================================================================
// MultiSioErrorPermit
// 概要  : 通信エラーが起きたときにエラー画面に飛ばすかどうかを許可
// 引数  : flag	
//		SIO_ERROR_PERMIT_JUMP:通信エラー画面に飛ばす(デフォルト)
//		SIO_ERROR_NO_JUMP	 :飛ばさない(ﾌﾗｸﾞ検出は可能)
// 戻り値: none
// =================================================================
extern void MultiSioErrorPermit(u8 flag);

// =================================================================
// MultiSioErrorCheck
// 概要  : 通信エラーが起きたかどうかを返す
// 引数  : none
// 戻り値: u8	0:エラー無し	1:エラー発生
// =================================================================
extern u8 MultiSioErrorCheck(void);


// =================================================================
// ClearSioTrainerInfo
// 概要  : 通信開始時の認証データをクリア
// 引数  : none
// 戻り値: none
// =================================================================
extern void ClearSioTrainerInfo();

// =================================================================
// CheckMyTrainerInfo
// 概要  : ID、名前情報を前回通信時と変わっていないかチェック
//			自動認証用
// 引数  : none
// 戻り値: u8
// =================================================================
extern void CheckMyTrainerInfo();


extern void PokemonMultiSioCheckInit();
extern u8 PokemonMultiSioCheck();
extern u8 PokemonNinshouNoCheck();
extern void SetSioPause();
extern void BlendMachineFunctionClear();
extern void SetSioSynchronize();
extern u8 SioStopFlag;


#ifdef DEBUG_NUMPRINT
extern void numprint(u32 num, u8 x, u8 y, u8 keta);
void DebugNumPrintInit(u8 pal, u8 select, u8 screen, u8 chara);
extern void DebugNumPrintInit2(u8 pal, u8 select, u8 screen, u8 chara);

#endif


