//=========================================================================
//	
//	ウィンドウ表示関連ツール
//
//=========================================================================

#ifndef WINDOW_H
#define WINDOW_H
#undef GLOBAL
#ifdef WINDOW_H_GLOBAL
#define GLOBAL /*	*/
#else
#define GLOBAL extern
#endif

//=========================================================================
//	定義
//=========================================================================
//#define name value

/* 会話ウィンドウ関連定義 */
#define MWIN_XPOS		1			//MSGウィンドウの表示Ｘ位置
#define MWIN_YPOS		14			//MSGウィンドウの表示Ｙ位置
#define	MWIN_XMARGIN	3			//実際のメッセージ表示位置とウィンドウ位置の差分(Ｘ)
#define	MWIN_YMARGIN	1			//実際のメッセージ表示位置とウィンドウ位置の差分(Ｙ)
//#define	MWIN_YMARGIN	2			//実際のメッセージ表示位置とウィンドウ位置の差分(Ｙ)
#define MWIN_MSGXPOS	(MWIN_XPOS+MWIN_XMARGIN)	//MSG表示開始X位置
#define MWIN_MSGYPOS	(MWIN_YPOS+MWIN_YMARGIN)	//MSG表示開始Y位置


#define MSGSCRN_STACK_START	0x10000		//外部ラム領域でのスタック開始位置
#define MSGSCRN_STACK_SIZE	0x04000		//スタックの大きさ
//typedef ...


//=========================================================================
//	変数
//=========================================================================
//GLOBAL type valiable;

typedef struct {
	const u8 * char_addr;
	const u16 * pltt_addr;
}NWIN_DATA;

extern const NWIN_DATA NWinDataTable[];

//=========================================================================
//	関数プロトタイプ
//=========================================================================
//GLOBAL type function(arg...);

//=========================================================================
//
//	汎用ウィンドウ
//
//=========================================================================
//-------------------------------------------------------------------------
//	ウィンドウ設定初期化
//	＜引数＞
//		cgx_num		windowキャラ開始位置
//	＜戻り値＞
//		windowキャラ開始位置＋windowキャラ数
//-------------------------------------------------------------------------
GLOBAL u16 NWinFrameInit(u16 cgx_num );

//-------------------------------------------------------------------------
//	ウィンドウリソース転送処理
//	＜引数＞
//		tw		MSG制御構造体（キャラセット位置を確定するために必要）
//-------------------------------------------------------------------------
GLOBAL void NWinFrameDataSet(TALK_WIN * tw);
//insert by soga 2002.07.15 パレットも指定したい！
GLOBAL void NWinFrameDataSetFight(TALK_WIN * tw,u8 palno);

//-------------------------------------------------------------------------
//	ウィンドウリソース転送処理(ウィンドウキャラ指定あり）
//	＜引数＞
//		tw		MSG制御構造体（キャラセット位置を確定するために必要）
//		type	ウィンドウの種類
//-------------------------------------------------------------------------
GLOBAL void NWinFrameDataCustomSet( TALK_WIN * tw, u8 type );

//-------------------------------------------------------------------------
//	ウィンドウ描画処理
//	＜引数＞
//		tw				MSG制御構造体（スクリーンアドレスを確定するために必要）
//		x1,y1,x2,y2		矩形位置指定
//-------------------------------------------------------------------------
GLOBAL void NWinFrameWrite(TALK_WIN * tw, u8 x1, u8 y1, u8 x2, u8 y2);

//=========================================================================
//
//	フィールド会話ウィンドウ
//
//=========================================================================
//-------------------------------------------------------------------------
//	会話ウィンドウメッセージ初期化処理
//	＜引数＞
//		cgx_num		キャラデータ開始位置
//-------------------------------------------------------------------------
GLOBAL u16 KWinFrameInit( u16 cgx_num );

//-------------------------------------------------------------------------
//	会話ウィンドウメッセージセット
//	＜引数＞
//		tw			MSG制御構造体
//		msg_adrs	メッセージデータへのポインタ
//-------------------------------------------------------------------------
GLOBAL void KWinMsgSet(TALK_WIN * tw, const u8 * msg_adrs);

//-------------------------------------------------------------------------
//	会話ウィンドウ生成処理
//	＜引数＞
//		tw			MSG制御構造体(キャラ位置、スクリーン位置の確定に必要)
//-------------------------------------------------------------------------
GLOBAL void KWinFrameWrite(TALK_WIN * tw);

//-------------------------------------------------------------------------
//	会話ウィンドウの消去
//	＜引数＞
//		tw			MSG制御構造体
//-------------------------------------------------------------------------
GLOBAL void KWinFrameClear(TALK_WIN * tw);

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
GLOBAL void KWinFrameChrSet(TALK_WIN * tw);
GLOBAL void KWinFrameScrnWrite( TALK_WIN * tw );
GLOBAL const NWIN_DATA * get_nwin_type( u8 type );


#undef GLOBAL
#endif	/*WINDOW_H*/

