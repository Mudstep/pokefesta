#ifndef __SEED_H__
#define __SEED_H__

//=========================================================================
//	
//=========================================================================

#undef GLOBAL
#ifdef SEED_H_GLOBAL
#define GLOBAL /*	*/
#else
#define GLOBAL extern
#endif

//=========================================================================
//	定義
//=========================================================================

#define	SEED_TYPE_MAX			43	/* きのみの種類 */
#define NORMAL_SEED_TYPE_MAX	42	/* 普通のきのみの種類 */

// きのみの成長段階定義

#define	SEEDSTAT_NOTHING		0	// 植えていない

#define	SEEDSTAT_UNDERGROUND	1	// 植えた直後
#define	SEEDSTAT_HUTABA			2	// 双葉、発芽直後
#define	SEEDSTAT_MIKI			3	// 幹、成長後
#define	SEEDSTAT_FLOWER			4	// 花
#define	SEEDSTAT_FRUIT			5	// 実がなった状態

#define	SEEDSTAT_CHANGE			0xff	// 変化中の場合

//水やりできる最大数
#define	SEEDWATER_MAX			4


#ifndef	ASM_CPP

//=========================================================================
//	変数
//=========================================================================

// きのみのパラメータ
extern const SEED_PARAM SeedParameter[];



//=========================================================================
//	関数プロトタイプ
//=========================================================================
//GLOBAL type function(arg...);

//-------------------------------------------------------------------------
//	外部追加するきのみ用ラム初期化処理
//-------------------------------------------------------------------------
GLOBAL void InitRamSeed( void );

//-------------------------------------------------------------------------
//	ＲＡＭ木の実ロード
//	<引数>	データアドレス
//-------------------------------------------------------------------------
GLOBAL void LoadRamSeed( const u8 * src );

//-------------------------------------------------------------------------
//	ＲＡＭ木の実の存在チェック
//	<戻り値>	TRUE	存在する
//				FALSE	存在しない
//-------------------------------------------------------------------------
GLOBAL int CheckRamSeedExist( void );

//-------------------------------------------------------------------------
//	木の実データ取得
//	<引数>		木の実の種類ＩＤ（１〜SEED_TYPE_MAX)
//	<戻り値>	SEED_PARAM構造体へのポインタ
//-------------------------------------------------------------------------
GLOBAL const SEED_PARAM * GetSeedParam( u8 no );

//-------------------------------------------------------------------------
//	ＲＡＭ木の実をセット（デバッグ用）
//-------------------------------------------------------------------------
#ifdef	PM_DEBUG
//セット
GLOBAL void DebugMakeDmyRamSeed(const u8 * name, u8 equip, u8 power);
//味を変える
GLOBAL void DebugChangeDmyRamSeedTaste(u8 karai, u8 sibui, u8 amai, u8 nigai, u8 suppai, u8 umai);
#endif

//-------------------------------------------------------------------------
//
//	目の前にきのみを植えられるかどうかのチェック
//
//	<戻り値>	TRUE	植えられる
//				FALSE	植えられない
//-------------------------------------------------------------------------
GLOBAL u8 SeedSetEnableCheck( void );

//-------------------------------------------------------------------------
//	みずやりができるかどうかのチェック
//	※チェックといっしょに水やりフラグのセットも行う
//	<戻り値>	TRUE	水やりできる
//				FALSE	水やりできない
//-------------------------------------------------------------------------
GLOBAL u8 ZyouroUseEnableCheck( void );

//-------------------------------------------------------------------------
//
//	苗床データの初期化
//
//-------------------------------------------------------------------------
GLOBAL void SeedBedInit( void );

//-------------------------------------------------------------------------
//	苗床にセットする
//	<引数>	bed_no		苗床の位置ID
//			type		きのみの種類
//			growth		成長段階
//			flag		TRUE	通常
//						FALSE	成長抑止
//-------------------------------------------------------------------------
GLOBAL void SeedBedSet( u8 bed_no, u8 type, u8 growth, u8 flag );

//-------------------------------------------------------------------------
//	きのみの種類を取得
//
//	<引数>		苗床のID
//	<戻り値>	1〜SEED_TYPE_MAX	種類コード
//				0					きのみが植えられていない
//-------------------------------------------------------------------------
GLOBAL	u8 GetSeedType( u8 bed_no );

//-------------------------------------------------------------------------
//	きのみの成長段階を取得
//
//	戻り値は上のSEEDSTAT_*の定義を参照
//-------------------------------------------------------------------------
GLOBAL u8 GetSeedGrowth( u8 bed_no );

//-------------------------------------------------------------------------
//	きのみの成長を反映
//	<引数>		進行した時間
//-------------------------------------------------------------------------
GLOBAL void EverySeedGrowth( s32 number );

//-------------------------------------------------------------------------
//	画面内のきのみチェック
//	※画面内に入ったらきのみが成長するように
//	　成長抑止フラグをクリアする
//-------------------------------------------------------------------------
GLOBAL void CheckSeedInScreen( void );

//-------------------------------------------------------------------------
//	きのみの名前をバッファにコピー
//	<引数>		type		きのみのタイプ指定
//				buf			コピーするバッファ
//	※バッファは最低でもSEED_NAME_SIZE+EOM_SIZEの長さが必要
//-------------------------------------------------------------------------
GLOBAL void SetSeedName( u8 type, u8 * buf );

//-------------------------------------------------------------------------
//	アイテムナンバーに対応したきのみのタイプナンバーを返す
//	<引数>		item	アイテムナンバー
//	<戻り値>	type	きのみのタイプナンバー
//-------------------------------------------------------------------------
u8 GetSeedIdByItemNo( u16 item );
#endif	/* ASM_CPP */

#undef GLOBAL
#endif	/*__SEED_H__*/

