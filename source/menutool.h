
//=========================================================================
//
// メニュー専用処理
// ８×８サイズ固定フォント、ノーマルウィンドウ枠
//	
//=========================================================================

#ifndef MENUTOOL_H
#define MENUTOOL_H
#undef GLOBAL
#ifdef MENUTOOL_H_GLOBAL
#define GLOBAL /*	*/
#else
#define GLOBAL extern
#endif

//=========================================================================
//	定義
//=========================================================================
//#define name value

//typedef ...

typedef u8 (*MENUFUNC)();

typedef struct{
	const u8 * msg;			// メッセージデータへのポインタ
	void * ptr;				// 汎用ポインタ（関数など）
}MENU_ITEM;



//=========================================================================
//	変数
//=========================================================================

extern u16 MenuFontStartNo;		// 文字フォント開始位置
extern u16 MenuNWinStartNo;		// メニューウィンドウフォント開始位置
extern u16 MenuKWinStartNo;		// MSGウィンドウフォント開始位置
extern u16 MenuChrEndNo;		//　フォント終了位置

//=========================================================================
//	関数プロトタイプ
//=========================================================================
//GLOBAL type function(arg...);


// カーソル選択共通定義
enum
{
	CURSOR_DEFAULT_VALUE = -2,
	CURSOR_CANCEL_VALUE	= -1,
};

// はい・いいえ選択用定義
enum {
	CURSOR_YES_VALUE = 0,
	CURSOR_NO_VALUE = 1,
};

//	はい・いいえ選択表示用の定義
enum{
	YESNOWIN_OFFX	= 6,	//ウィンドウサイズ指定
	YESNOWIN_OFFY	= 5,
	YESNOMSG_OFFX	= 2,	//MSG表示開始位置指定
	YESNOMSG_OFFY	= 1,
	YESNOCSR_OFFX	= 1,	//カーソル位置指定
	YESNOCSR_OFFY	= 1,
};

//----------------------------------------------------------------------------------
//	初期化処理
//	※MSG表示用変数（TALK_WIN)の初期化
//	※フォント、ウィンドウキャラのセット
//	　コンテキスト指定したCGX領域のトップから0x100+αキャラ分を使用します。
//----------------------------------------------------------------------------------
GLOBAL void NMenuScreenInit(CONTEXT_TYPE type);	
GLOBAL void NMenuScreenInitEx(CONTEXT_TYPE type, u16 chr_no);
GLOBAL void NMenuScreenInitEx2( CONTEXT_TYPE type, u16 chr_no );

GLOBAL void NMenuWindowCharSet( u8 type );
GLOBAL void NMenuWindowReset( void );

//----------------------------------------------------------------------------------
//	使用コンテキストの切り替え
//	※フォントキャラは事前に呼ばれたNMenuScreenInitでセットされているため
//	　コンテキストでの指定が違ってもキャラやカラーは画面には反映されない
// <引数>
//	type	コンテキストタイプ指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuContextChange( CONTEXT_TYPE type );

//----------------------------------------------------------------------------------
//　メッセージの表示
// <引数>
//	msg		メッセージデータへのポインタ
//	x,y		表示位置指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuMsgWrite(const u8 * msg, u8 x, u8 y);

//----------------------------------------------------------------------------------
//　一文字表示
// <引数>
//	code		表示する文字コード
//	x,y		表示位置指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuPutc( u8 code, u8 x, u8 y );

//----------------------------------------------------------------------------------
//　矩形領域のクリア
//	※透明キャラで指定領域を埋めます
// <引数>
//	x1,y1,x2,y2		領域指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuBoxClear(u8 x1, u8 y1, u8 x2, u8 y2);

//----------------------------------------------------------------------------------
//	矩形領域を空白で描画
//	※空白キャラ（背景色がついている）で指定領域を埋めます
// <引数>
//	x1,y1,x2,y2		領域指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuBoxWrite(u8 x1, u8 y1, u8 x2, u8 y2);

//----------------------------------------------------------------------------------
//	スクリーン全体をクリア
//----------------------------------------------------------------------------------
GLOBAL void NMenuScreenClear(void);

//----------------------------------------------------------------------------------
//	矩形領域にウィンドウ描画
// <引数>
//	x1,y1,x2,y2		領域指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuWinBoxWrite(u8 x1, u8 y1, u8 x2, u8 y2);	

//----------------------------------------------------------------------------------
//	画面下部にウィンドウで囲まれたメッセージを表示
// <引数>
//	msg		メッセージデータへのポインタ
//----------------------------------------------------------------------------------
GLOBAL void NMenuWinMsgWrite(const u8 * msg);

//----------------------------------------------------------------------------------
//	スクリーンコード取得
// <引数>
//	x,y		取得位置指定
//<戻り値>
//			指定位置のスクリーンコード
//----------------------------------------------------------------------------------
GLOBAL u16 NMenuGetCode( u8 x, u8 y );

//----------------------------------------------------------------------------------
//	矩形描画（枠のみ）
//<引数>
//	code			描画に使用するコード（※パレットNoも必要）
//	x1,y1,x2,y2		領域指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuBoxLineDirect( u16 code, u8 x1, u8 y1, u8 x2, u8 y2 );

//----------------------------------------------------------------------------------
//	会話ウィンドウ表示
//----------------------------------------------------------------------------------
GLOBAL void NMenuTalkWinWrite( void );

//----------------------------------------------------------------------------------
//	標準位置への送りメッセージ表示セット
//	<引数>
//	msg		メッセージデータへのポインタ
//----------------------------------------------------------------------------------
GLOBAL void NMenuTalkMsgSetEasy( const u8 * msg );

//----------------------------------------------------------------------------------
//	送りメッセージ表示セット
//	<引数>
//	msg		メッセージデータへのポインタ
//	x,y		表示位置指定
//----------------------------------------------------------------------------------
GLOBAL void NMenuTalkMsgSet(const u8 * msg, u8 x, u8 y);

//----------------------------------------------------------------------------------
//	続きメッセージ表示セット(2002/4/30 TETSU)
//	<引数>
//	msg		メッセージデータへのポインタ
//----------------------------------------------------------------------------------
GLOBAL void NMenuTalkMsgSetContinue( const u8 * msg );

//----------------------------------------------------------------------------------
//	送りメッセージ表示
//	<戻り値>
//	0			表示中
//	1			指定文字列の表示終了
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuTalkMsgPut( void );

//----------------------------------------------------------------------------------
//	メッセージ表示(一文字ごとに返る）
//	※TalkMsg系の制御コードがほとんど使用できないので注意
//	<戻り値>
//	0			表示中
//	1			指定文字列の表示終了
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuTalkMsgPutc( void );

//----------------------------------------------------------------------------------
//	ウィンドウメッセージのクリア
//----------------------------------------------------------------------------------
GLOBAL void NMenuTalkMsgClr( void );

//----------------------------------------------------------------------------------
//	縦方向カーソル選択の初期化
// <引数>
//	x,y		カーソル基本位置
//	Max		カーソル選択肢数
//	Pos		カーソル初期選択位置
// <戻り値>
//	カーソル初期選択位置（修正後）
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuVCursorInit(u8 x, u8 y, u8 Max, u8 Pos);

//----------------------------------------------------------------------------------
//	縦方向カーソルの移動 & セット
// <引数>
// mv		カーソル移動値
// <戻り値>
//	カーソル選択位置
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuVCursorSet(s8 mv);
GLOBAL u8 NMenuVCursorSetNoloop(s8 mv);

//----------------------------------------------------------------------------------
//	縦方向カーソルの選択位置を取得
// <戻り値>
//	カーソル選択位置
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuVCursorPosGet(void);

//----------------------------------------------------------------------------------
//	簡単な縦方向カーソルの制御
//	上キー(上移動）、下キー（下移動）、Ａボタン（決定）、Ｂボタン（キャンセル）
//
// <戻り値>
//	CURSOR_CANCEL_VALUE		キャンセルされた
//	CURSOR_DEFAULT_VALUE	まだ選択されていない
//	0 〜					決定された選択位置
//----------------------------------------------------------------------------------
GLOBAL s8 NMenuVCursorControl(void);
GLOBAL s8 NMenuVCursorControlNoloop(void);

//----------------------------------------------------------------------------------
//	縦横方向カーソルの移動 & セット			2001/08/28 by nakahiro
// <引数>
// m		カーソル移動値
// <戻り値>
//	カーソル選択位置
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuHVCursorSet(s8 m);

//----------------------------------------------------------------------------------
//	縦横方向カーソル選択の初期化			02/01/17 nohara
// <引数>
//	x,y		カーソル基本位置
//	Max		カーソル選択肢数
//	Pos		カーソル初期選択位置
//	arrange	項目の並べ方
// <戻り値>
//	カーソル初期選択位置（修正後）
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuHVCursorInit(u8 x, u8 y, u8 Max, u8 Pos, u8 arrange);

//----------------------------------------------------------------------------------
//縦横ウィンドウ表示(ウィンドウのみ)	02/01/17 nohara
// <引数>
//	x,y		左上の座標
//	Max		カーソル選択肢数
//	menu	文字列
//	arrange	項目の並べ方
//----------------------------------------------------------------------------------
GLOBAL void NMenuHVWinSet(u8 x, u8 y, u8 Max, const MENU_ITEM * menu, u8 arrange);

//----------------------------------------------------------------------------------
//縦横ウィンドウ表示(文字列のみ)			02/01/17	nohara
// <引数>
//	x,y		左上の座標
//	Max		カーソル選択肢数
//	menu	文字列
//	arrange	項目の並べ方
//----------------------------------------------------------------------------------
GLOBAL void NMenuHVStrSet(u8 x, u8 y, u8 Max, const MENU_ITEM * menu, u8 arrange);

//----------------------------------------------------------------------------------
//縦横ウィンドウセット(ウィンドウ表示、カーソル初期化、文字列表示)	02/01/17 nohara
// <引数>
//	x,y		左上の座標
//	Max		カーソル選択肢数
//	Pos		カーソル初期選択位置
//	menu	文字列
//	arrange	項目の並べ方
//----------------------------------------------------------------------------------
GLOBAL void HVSelectInit(u8 x, u8 y, u8 Max, u8 Pos, const MENU_ITEM * menu, u8 arrange);

//----------------------------------------------------------------------------------
//	縦横方向カーソルの移動 & セット			02/01/17 nohara
// <引数>
// m		カーソル移動値
// <戻り値>
//	カーソル選択位置
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuHVCursorSet2(s8 m);

//----------------------------------------------------------------------------------
//	縦横選択ウィンドウの制御				02/01/17 nohara
// <戻り値>
//	CURSOR_CANCEL_VALUE		キャンセルされた
//	CURSOR_DEFAULT_VALUE	まだ選択されていない
//	0 〜					決定された選択位置
//----------------------------------------------------------------------------------
GLOBAL s8 HVSelectMain(void);

//----------------------------------------------------------------------------------
//	指定した要素数の文字幅を取得			02/01/17 nohara
// <引数>
//	no		要素数
// <戻り値>
//	文字幅
//----------------------------------------------------------------------------------
GLOBAL u8 NMenuStrWidthGet(u8 no);

//----------------------------------------------------------------------------------
//	固定リストの表示
// <引数>
//	x,y		表示基本位置指定
//	Max		表示項目数
//	menu	項目データへのポインタ
//----------------------------------------------------------------------------------
GLOBAL void NMenuFixListWrite(u8 x, u8 y, u8 Max, const MENU_ITEM * menu);

//----------------------------------------------------------------------------------
//	リストで指定されているナンバーに対応した項目を取得して表示する
// <引数>
//	x,y		表示基本位置指定
//	Max		表示項目数
//	menu	項目データへのポインタ
//	List	構成する項目ナンバーリスト
//----------------------------------------------------------------------------------
GLOBAL void NMenuFreeListWrite(u8 x, u8 y, u8 Max, const MENU_ITEM * menu, const u8 * List);

//はい・いいえ　ウィンドウ関連
GLOBAL void YesNoSelectStrInit(u8,u8);	//2001/08/29 by nakahiro
GLOBAL void YesNoSelectInit(u8,u8);
GLOBAL s8 YesNoSelectMain(void);

GLOBAL void NMenuScreenInitStart(CONTEXT_TYPE type );
GLOBAL void NMenuScreenInitStartEx(CONTEXT_TYPE type, u16 chr_no);
GLOBAL int NMenuScreenInitMain( void );

#undef GLOBAL
#endif	/*MENUTOOL_H*/

