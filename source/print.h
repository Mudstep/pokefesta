//=========================================================================
//
//	print.h
//
//	ポケモンＡＧＢプロジェクト　文字列表示システム用ヘッダー
//
//	2001.03
//			ＰＰプロジェクトから渡辺さんが必要部分を抽出
//	2001.03.21
//			ポケモン用として基本部分完成
//	
//=========================================================================
#ifndef __PRINT_H__
#define __PRINT_H__

#include "pm_str.h"

#undef GLOBAL
#ifdef PRINT_H_GLOBAL
#define GLOBAL /*	*/
#else
#define GLOBAL extern
#endif


//=========================================================================
//	定義
//=========================================================================

/*	文字コード	*/

#include "fntequ.h"			//文字コード定義

/* 8x8サイズフォントシンボル定義 */
#include "def8x8.h"
#define	aa_8x8	a_8x8
#define	ii_8x8	i_8x8
#define	uu_8x8	u_8x8
#define	ee_8x8	e_8x8
#define	oo_8x8	o_8x8

#define HE_8x8	he_8x8
#define RI_8x8	ri_8x8



/* フォントのタイプ指定 */
enum{
		FONT8x16TYPE = 0,		/* 8x16サイズフォント */
		FONT8x8TYPE,			/* 8x8サイズフォント */
		FONT8x8RAWTYPE,			/* 8x8サイズフォント,ただしMSGコードが特殊 */

		FONT8x16sTYPE,			/* 8x16サイズフォント影つき */
		FONT8x8sTYPE,			/* 8x8サイズフォント影つき */
		FONT8x8sRAWTYPE,		/* 8x8サイズフォント影つき,ただしMSGコードが特殊 */

		FONTTENJITYPE,			/* 8x8サイズ点字用キャラ */
};

/* MSGモードのタイプ　*/
typedef enum {
		DEFAULT_TYPE,			/* 通常　*/
		FIGHT_TYPE,				/* 戦闘画面 */
		POKELIST_TYPE,			/* ポケモンリスト */
		POKELIST2_TYPE,			/* ポケモンリストVer2 */
		FIELD_MSG_TYPE,			/* フィールドメッセージ */
		CGX_ONLY_TYPE,			/* 単なるキャラデータ転送 */
		FIELD_MENU_TYPE,		/* フィールドメニュー */
		MENUPOKE_TYPE,			/* フィールドポケモンリスト内メニュー */
		PASOBOXMENU_TYPE,		/* パソコンボックスメニュー */
		MYSTATUS0_TYPE,			/* 主人公ｽﾃｰﾀｽ */
		MYSTATUS1_TYPE,			/* 主人公ｽﾃｰﾀｽ */
		BAG_TYPE,				/* バッグ	2001/08/29 by nakahiro */
		BAG_TYPE2,				/* バッグ2	2002/02/01 by nakahiro */
		POKESTATUS_TYPE,		/* ﾎﾟｹﾓﾝｽﾃｰﾀｽ 2001.09.19(水) by matsuda */
		POKESTATUS_TYPE3,		/* ﾎﾟｹﾓﾝｽﾃｰﾀｽ3 2002/04/23 by nakahiro */
		NAMEIN_BG0_TYPE,		/* 名前入力 */
		NAMEIN_HIRA_BG1_TYPE,	/* 名前入力 */
		NAMEIN_HIRA_BG2_TYPE,	/* 名前入力 */
		NAMEIN_KANA_BG1_TYPE,	/* 名前入力 */
		NAMEIN_KANA_BG2_TYPE,	/* 名前入力 */
		NAMEIN_ABC_BG1_TYPE,	/* 名前入力 */
		NAMEIN_ABC_BG2_TYPE,	/* 名前入力 */
		NAMEIN_BG3_TYPE,		/* 名前入力 */
		KOUKAN_TYPE,			/* こうかん画面 */
		PASOBOXSTATUS_TYPE,     /* ボックス（ステータス）2001/09/26  TAYA */
		COM_MIX_TYPE,			/* 「ふしぎなねがいごと」通信画面用 */
		CONRES1_TYPE,			/* ｺﾝﾃｽﾄ結果発表画面 背景部分 by matsuda */
		CONRES2_TYPE,			/* ｺﾝﾃｽﾄ結果発表画面 ｳｨﾝﾄﾞｳ部分 by matsuda */
		CONTEST_TYPE,			/* ｺﾝﾃｽﾄ2次審査画面 by matsuda */
		CONTEST_TALK_TYPE,		/* ｺﾝﾃｽﾄ2次審査画面、メッセージ送り用 */
		WAZALIST_TYPE,			/* 技リスト画面用 by matsuda */
		ZUKANMAIN_TYPE,			/* 図鑑画面用 by TETSU */
		ZUKANLIST_TYPE,			/* 図鑑リスト画面用 by TETSU */
		KAIWA_TYPE,				/* 簡易会話画面用  2001/11/30  taya */
		KAIWADISABLE_TYPE,		/* 簡易会話画面用  2001/12/11  taya */
		BLENDMACHINE_TYPE,		/* ブレンドマシーン  2001/12/25  mori */
		TNAVI_TYPE,				/* トレナビ用  2002/02/08  taya */
		TNAVI2_TYPE,			/* トレナビ用  2002/02/23  taya */
		TNAVI3_TYPE,			/* トレナビ用  2002/02/27  taya */
		SLOT_TYPE,				/* ｽﾛｯﾄ用 02/02/19 kaga */
		SLOT_INFO_TYPE,			/* ｽﾛｯﾄ用 02/08/06 kaga */
		CUBECASE_TYPE,			/* キューブケース　 2002/02/26 by nakahiro */
		CUBECASE_TYPE2,			/* キューブケース２ 2002/02/26 by nakahiro */
		CON_PIC_TYPE,			/* 肖像画用 02/02/27 tomo */
		KOUKANDEMO_TYPE,		/* こうかんデモ用 2002/07/01 mori*/
		DENDOU_TYPE,			/* 殿堂入り用 2002/7/3 TETSU */
		DENDOU2_TYPE,			/* 殿堂入り用2 2002/7/3 TETSU */
		TNAVI4_TYPE,			/* トレナビ用  2002/07/04  taya */
		TAG_TYPE,				/* タグ画面	2002/07/15 by nakahiro */
		TUUSHINWIN1_TYPE,		// 通信対戦ウィンドウ用 by soga
		TUUSHINWIN2_TYPE,		// 通信対戦ウィンドウ用 by soga
		KAIWA2_TYPE,			/* 簡易会話画面  2002/08/12  taya */
		STAFFROLL_TYPE,			/* スタッフロール  2002/08/22  tetsu */
}CONTEXT_TYPE;

/********************************************************************/
/********************************************************************/

typedef const struct FONT_CONTEXT_STRUCT * CONST_FONT_CONTEXT_P;

//	文字表示制御構造体
typedef struct{
	CONST_FONT_CONTEXT_P  context;
	u16		status;		// ｽﾃｰﾀｽ
	u16		work;		//
	u8		sw;			// ｽｲｯﾁﾌﾗｸﾞ
	u8		wait;		// ｳｪｲﾄ

	u8		mode;		// 文字表示モード
	u8		font;		// 使用フォント
	u8		col_f;  	// 色番号(文字)
	u8		col_b;		// 色番号(背景)
	u8		col_s;		// 色番号(影)
	u8		palette;	// 使用パレット

	const u8 *text;		// ﾃｷｽﾄ ﾃﾞｰﾀｱﾄﾞﾚｽ
	u16		text_p;		// ﾃｷｽﾄ ｵﾌｾｯﾄ

	u16		cgx_n;		// CGX 位置
	u16		cgx_np;		// CGX Offset

	u8		scr_x;		// ｽｸﾘｰﾝX 位置
	u8		scr_xp;		// ｽｸﾘｰﾝX Offset
	u8		scr_y;		// ｽｸﾘｰﾝY 位置
	u8		scr_yp;		// ｽｸﾘｰﾝY Offset

	void *	cgx_adrs;

}TALK_WIN;



#define CHRSIZE			(0x20)		//ｷｬﾗｸﾀｰ基本ﾃﾞｰﾀｻｲｽﾞ
#define F_PAL			(15)		//ﾌｫﾝﾄ表示用PLTｴﾘｱ指定
#define SCR_PAL			(F_PAL<<12)	//ｽｸﾘｰﾝﾊﾟﾚｯﾄ指定
#define SCRX_SZ			(32)		//ｽｸﾘｰﾝXｻｲｽﾞ

#define SYS_FONT_SIZ	(1)			//標準的に使用するキャラの数
#define	CLR_CHR_NO		(0)			//システムで設定される透明キャラのコード


#define	VX_SIZE			(30)		//表示領域の大きさ（X方向）
#define	VY_SIZE			(20)		//表示領域の大きさ（Y方向）

#define WIN_LINE_SZ		(22)				//会話ウィンドウの1行あたりの文字数
#define	WIN_LINE_NUM	(4)					//会話ウィンドウの高さ

/* MSG表示速度 */
enum{
	FAST_MSG_SPEED	=	1,
	NORMAL_MSG_SPEED =	4,
	SLOW_MSG_SPEED =	8,
};

/*色の指定*/
#define COL_NUKE   0x00
#define COL_BLACK  0x01
#define COL_RED    0x02
#define COL_GREEN  0x03
#define COL_BLUE   0x04
#define COL_YELLOW 0x05
#define COL_LBLUE  0x06
#define COL_PURPLE 0x07
#define COL_DGRAY  0x08
#define COL_LGRAY  0x09

#define COL_WHITE  0x0f

//=========================================================================
//	変数
//=========================================================================


//=========================================================================
//	関数プロトタイプ
//=========================================================================

//-----------------------------------------------------------------
//	メッセージ表示領域初期化ルーチン
//
//	※必ず最初に呼び出しておく必要があります。
//	※PrintBgInit/PrintPaletteInit/PrintRegisterInit を
//	　呼んでいるだけの働きです。
//-----------------------------------------------------------------
GLOBAL void PrintScreenInit(CONTEXT_TYPE type);

//-----------------------------------------------------------------
//	VRAMの初期化（空白キャラセット＆スクリーンクリア）
//-----------------------------------------------------------------
GLOBAL void PrintBgInit( CONTEXT_TYPE type );

//-----------------------------------------------------------------
//	デフォルトパレットのセット
//-----------------------------------------------------------------
GLOBAL void PrintPaletteInit( CONTEXT_TYPE type );

//-----------------------------------------------------------------
//	スクリーンレジスタの初期化
//-----------------------------------------------------------------
GLOBAL void PrintRegisterInit( CONTEXT_TYPE type );

//-----------------------------------------------------------------
//	フォントセットルーチン
//	※表示前にフォントをセットします。
//	　固定フォントを使用する場合必須です。
//
//	<引数>
//		tw			MSG制御構造体
//		cgx_num		フォントをセットするキャラ位置
//
//	<戻り値>
//	セットしたフォントのキャラ数
//	固定フォントでないなど、セットに失敗した場合は０を返す
//-----------------------------------------------------------------
GLOBAL u16 PrintFontInit(TALK_WIN * tw, u16 cgx_num);

//-----------------------------------------------------------------
//	フォントセット（分割処理）初期化ルーチン
//	※このルーチンを読んだ後にPRT_SetSplitFontMainを繰り返し呼びます。
//	※引数・戻り値はPrintFontInitと同じです。
//-----------------------------------------------------------------
GLOBAL int PRT_SetSplitFontInit( TALK_WIN * tw, u16 cgx_num );

//-----------------------------------------------------------------
//	フォントセット（分割処理）メインルーチン
//	※PRT_SetSplitFontInitとセットで使用します。
//	<戻り値>
//	TRUE		転送終了
//	FALSE		転送中
//-----------------------------------------------------------------
GLOBAL int PRT_SetSplitFontMain(void);

//-----------------------------------------------------------------
//	Vsync割込み中表示関連システム
//
//	※現状ダミーですので呼ぶ必要はありません。
//	　今後仕様変更によりVsync中に呼び出してもらう可能性があります。
//-----------------------------------------------------------------
GLOBAL void PrintScreenVsync(void);

//-----------------------------------------------------------------
// TALK_WIN構造体の初期化処理
//
// <引数>
//		tw		MSG制御構造体
//		n		MSGモードのタイプ
//		 ※nには上のCONTEXT_TYPE のenum定義から当てはまるものを選ぶ
//-----------------------------------------------------------------
void MsgControlInit(TALK_WIN * tw, CONTEXT_TYPE n);


//-----------------------------------------------------------------
//	文字列セット→表示ルーチン
//	※内部的にはMsgPutSet→MsgPutの呼び出しまで行っている
//
// <引数>
//	tw			使用するメッセージ構造体
//	msg_adrs	メッセージデータへのポインタ
//	cgx_num		使用キャラ開始位置オフセット
//	xpos		表示Ｘ位置
//	ypos		表示Ｙ位置(8×16サイズフォントの下が基準）
//-----------------------------------------------------------------
GLOBAL u8 MsgPrint( TALK_WIN* tw, const u8* msg_adrs, u16 cgx_num, u8 xpos, u8 ypos);

//-----------------------------------------------------------------
//	一文字表示用ルーチン
//	<入力パラメータ>
//	tw			使用するメッセージ構造体
//	code		表示する文字コード
//	cgx_num		使用キャラ開始位置オフセット
//	xpos		表示Ｘ位置
//	ypos		表示Ｙ位置(8×16サイズフォントの下が基準）
//-----------------------------------------------------------------
GLOBAL u8 MsgPutc( TALK_WIN* tw, u8 code, u16 cgx_num, u8 xpos, u8 ypos );

//-----------------------------------------------------------------
//	文字列表示セットルーチン
//
// <引数>
//	tw			使用するメッセージ構造体
//	msg_adrs	メッセージデータへのポインタ
//	cgx_num		使用キャラ開始位置オフセット
//	xpos		表示Ｘ位置
//	ypos		表示Ｙ位置(8×16サイズフォントの下が基準）
//-----------------------------------------------------------------
GLOBAL void MsgPutSet(TALK_WIN * tw, const u8* msg_adrs, u16 cgx_num, u8 xpos, u8 ypos);

//-----------------------------------------------------------------
//	文字列表示ルーチン（指定文字列を全て表示してから返ってくる）
//
// <引数>
//	tw			使用するメッセージ構造体
//-----------------------------------------------------------------
GLOBAL u8 MsgPut(TALK_WIN * tw);

//-----------------------------------------------------------------
//	文字列表示ルーチン（一文字表示するごとに返ってくる）
//
//	<引数>
//	tw		使用するメッセージ構造体
//	<戻り値>
//	0		表示中
//	1		終了
//-----------------------------------------------------------------
GLOBAL u8 TalkMsgPutc( TALK_WIN * tw );

//-----------------------------------------------------------------
//	ウィンドウメッセージセットルーチン
//
// <引数>
//	tw			使用するメッセージ構造体
//	msg_adrs	メッセージデータへのポインタ
//	cgx_num		使用キャラ開始位置オフセット
//	xpos,ypos	表示位置
//-----------------------------------------------------------------
GLOBAL void TalkMsgSet(TALK_WIN* tw, const u8* msg_adrs, u16 cgx_num, u8 xpos, u8 ypos);

//-----------------------------------------------------------------
//	ウィンドウ続きメッセージセットルーチン
//
// <引数>
//	tw			使用するメッセージ構造体
//	msg_adrs	メッセージデータへのポインタ
//-----------------------------------------------------------------
GLOBAL void ContinueMsgSet(TALK_WIN* tw, const u8* msg_adrs);

//-----------------------------------------------------------------
//	ウィンドウメッセージ制御ルーチン
//	※1文字表示or1ウェイト毎に返ってくる。
//
// <引数>
//	tw			使用するメッセージ構造体
//
// <戻り値>
//	0			表示中
//	1			指定文字列の表示終了
//-----------------------------------------------------------------
GLOBAL u8 TalkMsgPut(TALK_WIN * tw);

//-----------------------------------------------------------------
//	バトル用ウィンドウメッセージ制御ルーチン
//	※通信対戦時に文字送りができなくなる以外はTalkMsgPutと同じ機能
//-----------------------------------------------------------------
GLOBAL u8 BattleTalkMsgPut( TALK_WIN * tw);

//-----------------------------------------------------------------
//	通信用ウィンドウメッセージ制御ルーチン
//	※常に文字送りが禁止される
//-----------------------------------------------------------------
GLOBAL u8 NoSkipTalkMsgPut( TALK_WIN * tw);

//-----------------------------------------------------------------
//	コンテスト用ウィンドウメッセージ制御ルーチン
//-----------------------------------------------------------------
GLOBAL u8 ContestTalkMsgPut( TALK_WIN * tw );

//-----------------------------------------------------------------
//	ウィンドウメッセージのクリア
//	※空白文字でウィンドウメッセージ表示領域をクリアする
//-----------------------------------------------------------------
GLOBAL void TalkMsgClr(TALK_WIN * tw);

//-----------------------------------------------------------------
// 指定CGXデータのセットのみをおこなう
//
// <引数>
//	adrs		データを配置する位置へのポインタ
//	msg			メッセージデータへのポインタ
//-----------------------------------------------------------------
GLOBAL void MsgCGXDataSet(void * adrs, const u8 * msg);


//-----------------------------------------------------------------
//	指定位置のスクリーンデータを取得する
//	<引数>
//	tw			使用するメッセージ構造体
//	x,y			座標
//	<戻り値>
//	指定位置のスクリーンデータの値
//-----------------------------------------------------------------
GLOBAL u16 FontScrnCodeGet( TALK_WIN * tw, u8 x, u8 y );

//-----------------------------------------------------------------
//	矩形描画（枠のみ）
//<引数>
//	code			描画に使用するコード（※パレットNoも必要）
//	x1,y1,x2,y2		領域指定
//	
//-----------------------------------------------------------------
GLOBAL void FontScrnBoxLineDirect( TALK_WIN* tw, u16 code, u8 x1, u8 y1, u8 x2, u8 y2 );

//-----------------------------------------------------------------
//	矩形描画（枠のみ）
//<引数>
//	code			描画に使用するコード
//	x1,y1,x2,y2		領域指定
//-----------------------------------------------------------------
GLOBAL void FontScrnBoxLine( TALK_WIN* tw, u16 code, u8 x1, u8 y1, u8 x2, u8 y2 );

//-----------------------------------------------------------------
// 指定したスクリーンエリアを指定コードで塗りつぶす
//
//	<入力パラメータ>
//	tw			使用するメッセージ構造体
//	code		塗りつぶすスクリーンコード（※パレットNoも必要）
//	x1,y1		左上座標
//	x2,y2		右下座標
//-----------------------------------------------------------------
GLOBAL void FontScrnBoxFillDirect( TALK_WIN * tw, u16 code, u8 x1, u8 y1, u8 x2, u8 y2 );

//-----------------------------------------------------------------
//	スクリーンのクリア
//
// <引数>
//	tw			使用するメッセージ構造体
//	x1,y1		左上座標
//	x2,y2		右下座標
//-----------------------------------------------------------------
GLOBAL void FontScrnAreaClear(TALK_WIN * tw, u8 x1, u8 y1, u8 x2, u8 y2);

//-----------------------------------------------------------------
// 指定したスクリーンエリアを指定コードで塗りつぶす
//
// <引数>
//	tw			使用するメッセージ構造体
//	code		塗りつぶすスクリーンコード
//	x1,y1		左上座標
//	x2,y2		右下座標
//-----------------------------------------------------------------
GLOBAL void FontScrnBoxFill( TALK_WIN * tw ,u16 code, u8 x1, u8 y1, u8 x2, u8 y2);

//-----------------------------------------------------------------
// 指定エリア塗りつぶし簡易版
//
// ※モードにより動作がちがう
// 固定フォントモード:		塗りつぶしコードは空白キャラを使用する
// 転送フォントモード:		塗りつぶしコードは自動的に最初に登録したキャラを使用する
//
//	<入力パラメータ>
//	tw				使用するメッセージ構造体
//	x1,y1,x2,y2		矩形範囲指定
//-----------------------------------------------------------------
GLOBAL void FontScrnEasyBoxFill( TALK_WIN * tw, u8 x1, u8 y1, u8 x2, u8 y2);

//-----------------------------------------------------------------
//	使用パレットの値を取得する
//-----------------------------------------------------------------
GLOBAL u16	FontPalValue(TALK_WIN * tw);

#undef GLOBAL
#endif	/*__PRINT_H__*/
