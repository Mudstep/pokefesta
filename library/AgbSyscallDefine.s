@********************************************************************
@*          AgbSyscallDefine.s                                      *
@*            AGBシステムコール（GAS用）                            *
@*                                                                  *
@*          Copyright (C) 1999-2001 NINTENDO Co.,Ltd.               *
@********************************************************************


@--------------------------------------------------------------------
@-                   システムコールＮｏ                             -
@--------------------------------------------------------------------

SWI_NO_RESTART                  =   0       @ SoftReset()
SWI_NO_REGISTER_RAM_RESET       =   1       @ SoftReset()/RegisterRamReset()
SWI_NO_HALT                     =   2       @ Halt()
SWI_NO_STOP                     =   3       @ Stop()

SWI_NO_INTR_WAIT                =   4       @ IntrWait()
SWI_NO_VBLANK_INTR_WAIT         =   5       @ VBlankIntrWait()

SWI_NO_DIV                      =   6       @ Div()/DivRem()
SWI_NO_DIV_ARM                  =   7       @ DivArm()/DivRemArm()
SWI_NO_SQRT                     =   8       @ Sqrt()
SWI_NO_ARCTAN                   =   9       @ ArcTan()
SWI_NO_ARCTAN2                  =   10      @ ArcTan2()

SWI_NO_CPU_SET                  =   11      @ CpuSet()
SWI_NO_CPU_FAST_SET             =   12      @ CpuFastSet()
SWI_NO_BG_AFFINE_SET            =   14      @ BgAffineSet()
SWI_NO_OBJ_AFFINE_SET           =   15      @ ObjAffineSet()
SWI_NO_BIT_UNPACK               =   16      @ BitUnPack()
SWI_NO_LZ77_UNCOMP_WRAM         =   17      @ LZ77UnCompWram()
SWI_NO_LZ77_UNCOMP_VRAM         =   18      @ LZ77UnCompVram()
SWI_NO_HUFF_UNCOMP              =   19      @ HuffUnComp()
SWI_NO_RL_UNCOMP_WRAM           =   20      @ RLUnCompWram()
SWI_NO_RL_UNCOMP_VRAM           =   21      @ RLUnCompVram()
SWI_NO_DIFF_8BIT_UNFILTER_WRAM  =   22      @ Diff8bitUnFilterWram()
SWI_NO_DIFF_8BIT_UNFILTER_VRAM  =   23      @ Diff8bitUnFilterVram()
SWI_NO_DIFF_16BIT_UNFILTER      =   24      @ Diff16bitUnFilter()

SWI_NO_SOUND_BIAS_CHANGE        =   25      @ SoundBiasSet()/SoundBiasReset()
SWI_NO_SOUND_DRIVER_INIT        =   26      @ SoundDriverInit()
SWI_NO_SOUND_DRIVER_MODE        =   27      @ SoundDriverMode()
SWI_NO_SOUND_DRIVER_MAIN        =   28      @ SoundDriverMain()
SWI_NO_SOUND_DRIVER_VSYNC       =   29      @ SoundDriverVSync()
SWI_NO_SOUND_DRIVER_VSYNC_OFF   =   40      @ SoundDriverVSyncOff()
SWI_NO_SOUND_DRIVER_VSYNC_ON    =   41      @ SoundDriverVSyncOn()
SWI_NO_SOUND_CHANNEL_CLEAR      =   30      @ SoundChannelClear()
SWI_NO_MIDI_KEY_2_FREQ          =   31      @ MidiKey2Freq()

SWI_NO_MULTI_BOOT               =   37      @ MultiBoot()


@--------------------------------------------------------------------
@-                   ソフトリセット                                 -
@--------------------------------------------------------------------

    .EXTERN SoftReset

@・ResetFlagsで指定したレジスタとRAMをリセットし、SOFT_RESET_DIRECT_BUF
@  (0x03007ffa)の値によって、カートリッジまたはCPU外部RAMの先頭アドレスへ
@  復帰します。
@・CPU外部RAMへ復帰する場合は RESET_EX_WRAM_FLAG を指定しないで下さい。
@・ダウンロードプログラムからカートリッジへ復帰する場合は RESET_REG_SIO_FLAG
@  を指定しないで下さい。
@・CPUコアレジスタとCPU内部RAMの0x3007e00〜0x3007fffの領域は
@  強制的にクリアされます。
@
@・引数：
@    u32 ResetFlags      リセットするレジスタとRAMの指定（AgbDefine.h参照）
@
@・*(u8 *)SOFT_RESET_DIRECT_BUF  復帰先指定
@        0:                      0x08000000番地（カートリッジ）
@        0以外:                  0x02000000番地（CPU外部RAM）

@--------------------------------------------------------------------
@-                   ソフトリセット（カートリッジ復帰）             -
@--------------------------------------------------------------------

    .EXTERN SoftResetRom

@・ResetFlagsで指定したレジスタとRAMをリセットし、カートリッジの先頭アドレス
@  (0x08000000)へ復帰します。
@・ダウンロードプログラムから復帰する場合、カートリッジプログラムが
@  通常の起動と識別できるように RESET_REG_SIO_FLAG を指定しないで下さい。
@・CPUコアレジスタとCPU内部RAMの0x3007e00〜0x3007fffの領域は
@  強制的にクリアされます。
@
@・引数：
@    u32 ResetFlags      リセットするレジスタとRAMの指定（AgbDefine.h参照）

@--------------------------------------------------------------------
@-                   ソフトリセット（CPU外部RAM復帰）               -
@--------------------------------------------------------------------

    .EXTERN SoftResetExram

@・ResetFlagsで指定したレジスタとRAMをリセットし、CPU外部RAMの先頭アドレス
@  (0x02000000)へ復帰します。
@・CPU外部RAMへ復帰するため RESET_EX_WRAM_FLAG はクリアされます。
@・CPUコアレジスタとCPU内部RAMの0x3007e00〜0x3007fffの領域は
@  強制的にクリアされます。
@
@・引数：
@    u32 ResetFlags      リセットするレジスタとRAMの指定（AgbDefine.h参照）

@--------------------------------------------------------------------
@-               レジスタ＆ＲＡＭ リセット                          -
@--------------------------------------------------------------------

    .EXTERN RegisterRamReset

@・ResetFlagsで指定したレジスタとRAMをリセットします。
@・但し、CPU内部RAMの0x3007e00〜0x3007fffの領域はクリアしません。
@
@・引数：
@    r0:                  リセットするレジスタとRAMの指定（AgbDefine.s参照）

@--------------------------------------------------------------------
@-                   ＨＡＬＴ                                       -
@--------------------------------------------------------------------

@   .EXTERN Halt

@・CPUのみ停止させます。
@・該当する割り込みが許可（IEにセット）されている
@  割り込み要求（IFセット）にて復帰します。

@--------------------------------------------------------------------
@-                   ＳＴＯＰ                                       -
@--------------------------------------------------------------------

    .EXTERN SoundBiasSet
    .EXTERN SoundBiasReset

@   .EXTERN Stop

@・原発振を停止します。
@・該当する割り込みが許可（IEにセット）されている場合
@  キーまたはカートリッジまたはSIOからの割り込み要求条件の発生にて復帰します。
@・原発振が停止していますのでIFフラグはセットされません。
@・必ずLCDCをOFFにして実行して下さい。

@--------------------------------------------------------------------
@-               割り込みウェイト                                   -
@--------------------------------------------------------------------

    .EXTERN IntrWait

@・IntrFlagsで指定した割り込みが発生するまでHalt状態で待ち続けます。
@・割り込み処理にてINTR_CHECK_BUF(0x3007ff8)へ該当するフラグをセットして下さい。
@・複数の割り込みを併用した時、Halt()が繰り返し呼び出される場合と比べて
@  システムコール呼び出しのオーバーヘッドを軽減することができます。
@
@・引数：
@    r0:                 既に該当フラグがセットされている場合にクリアするかどうかの指定
@    r1:                 ウェイトする割り込みの指定（AgbDefine.s参照）

@--------------------------------------------------------------------
@-               Ｖブランク割り込みウェイト                         -
@--------------------------------------------------------------------

    .EXTERN VBlankIntrWait

@・Ｖブランク割り込みが発生するまでHalt状態で待ち続けます。
@・割り込み処理にてINTR_CHECK_BUF(0x3007ff8)へ該当するフラグをセットして下さい。
@・複数の割り込みを併用した時、Halt()が繰り返し呼び出される場合と比べて
@  システムコール呼び出しのオーバーヘッドを軽減することができます。
@・IntrWait(1, V_BLANK_INTR_FLAG)と等価です。

@--------------------------------------------------------------------
@-                   符号付き割り算（商）                           -
@--------------------------------------------------------------------

    .EXTERN Div                 @ RedHat社（旧Cygnus社）ライブラリ対応
    .EXTERN DivArm              @ ARM社ライブラリ対応

@・Number/Denomを算出します。
@・レジスタの値は、r0=Number/Denom, r1=Number%Denom, 
@  r3=|Number/Denom|で復帰します。
@
@・引数：（ARM社ライブラリは逆）
@    r0:                 分子
@    r1:                 分母

@--------------------------------------------------------------------
@-                   符号付き割り算（余り）                         -
@--------------------------------------------------------------------

    .EXTERN DivRem              @ RedHat社（旧Cygnus社）ライブラリ対応
    .EXTERN DivRemArm           @ ARM社ライブラリ対応

@・Number%Denomを算出します。
@・レジスタの値は、r0=Number%Denom, r1=Number%Denom, 
@  r3=|Number/Denom|で復帰します。
@
@・引数：（ARM社ライブラリは逆）
@    r0:                 分子
@    r1:                 分母

@--------------------------------------------------------------------
@-                   平方根                                         -
@--------------------------------------------------------------------

    .EXTERN Sqrt

@・平方根を算出します。
@・精度を良くするために引数Xを2の倍数だけ左シフトして渡し、
@  戻り値もシフトして桁合わせを行なって下さい。

@--------------------------------------------------------------------
@-                   逆正接                                         -
@--------------------------------------------------------------------

    .EXTERN ArcTan

@・逆正接値を算出します。
@・戻り値は-π/2＜θ＜π/2を0xc000〜0x4000の範囲で返します。
@・但し、θ＜-π/4,π/4＜θの範囲は精度に問題があります。
@
@・引数：
@    r0:
@        符号:1
@        整数部:1
@        少数部:14

@--------------------------------------------------------------------
@-                   逆正接２                                       -
@--------------------------------------------------------------------

    .EXTERN ArcTan2

@・補正処理後の逆正接値を算出します。
@・通常はこちらを使用して下さい。
@・戻り値は0≦θ＜2πを0〜0xffffの範囲で返します。
@
@・引数：
@    r0, r1:
@        符号:1
@        整数部:1
@        少数部:14

@--------------------------------------------------------------------
@-                   ＣＰＵセット                                   -
@--------------------------------------------------------------------

    .EXTERN CpuSet

@・DmaSetマクロ互換のパラメータでRAMクリアまたはコピーします。
@・32bit転送では強制的に4Byte境界にてアクセスされますが、
@  16bit転送では引数を2Byte境界へ合わせて渡す必要があります。
@
@・引数：
@    r0:                 ソースアドレス
@    r1:                 デスティネーションアドレス
@    r2:                 DMA_SRC_FIX／DMA_32BIT_BUS／DMA_COUNT_MASKのみ有効
@          DMA_SRC_FIX(  0, 1) = (ソースアドレス・インクリメント, ソースアドレス固定)
@          DMA_32BIT_BUS(0, 1) = (16bit転送, 32bit転送)
@          DMA_COUNT_MASK & DmaCntData = 転送回数
@
@・上位マクロ：
@  CpuClear, CpuArrayClear, CpuCopy, CpuArrayCopy

@--------------------------------------------------------------------
@-                   ＣＰＵ高速セット                               -
@--------------------------------------------------------------------

    .EXTERN CpuFastSet

@・DmaSetマクロ互換のパラメータで高速にRAMクリアまたはコピーします。
@・但し、32Byte（8Word）単位の32bit転送です。
@・4Byte境界以外で引数を与えても強制的に4Byte境界にてアクセスされます。
@
@・引数：
@    r0:                 ソースアドレス
@    r1:                 デスティネーションアドレス
@    r2:                 DMA_SRC_FIX／DMA_COUNT_MASKのみ有効
@          DMA_SRC_FIX(0, 1) = (ソースアドレス・インクリメント, ソースアドレス固定)
@          DMA_COUNT_MASK & DmaCntData = 転送回数
@
@・上位マクロ：
@  CpuFastClear, CpuFastArrayClear, CpuFastCopy, CpuFastArrayCopy

@--------------------------------------------------------------------
@-                   ＢＧアフィン変換 セット                        -
@--------------------------------------------------------------------

    .EXTERN BgAffineSet

@・BGのアフィンパラメータを算出し、セットします。
@
@・引数：
@    r0:                       ソースアドレス
@    r1:                       デスティネーションアドレス
@    r2:                       計算回数
@
@・BgAffineSrcData構造体
@    s32 SrcCenterX            元データ中心座標（小数点以下8bit）
@    s32 SrcCenterY
@    s16 DispCenterX           表示中心座標
@    s16 DispCenterY
@    s16 RatioX                拡大縮小率（小数点以下8bit）
@    s16 RatioY
@    u16 Theta                 回転角（小数点以下8bit）
@                                  有効範囲    0 - 0xffff
@・BgAffineDestData構造体
@    s16 H_DiffX               ライン方向Ｘ座標差分
@    s16 V_DiffX                 垂直方向Ｘ座標差分
@    s16 H_DiffY               ライン方向Ｙ座標差分
@    s16 V_DiffY                 垂直方向Ｙ座標差分
@    s32 StartX                スタートＸ座標
@    s32 StartY                スタートＹ座標

@--------------------------------------------------------------------
@-                   ＯＢＪアフィン変換 セット                      -
@--------------------------------------------------------------------

    .EXTERN ObjAffineSet

@・OBJのアフィンパラメータを算出し、セットします。
@
@・引数：
@    r0:                       ソースアドレス
@    r1:                       デスティネーションアドレス
@    r2:                       計算回数
@    r3:                       パラメータアドレスのオフセット・バイト数（通常 2|8）
@                              OAMに直接セットする場合は"8"を指定
@
@・ObjAffineSrcData構造体
@    s16 RatioX                拡大縮小率（小数点以下8bit）
@    s16 RatioY
@    u16 Theta                 回転角（小数点以下8bit）
@                                  有効範囲    0 - 0xffff
@・ObjAffineDestData構造体
@    s16 H_DiffX               ライン方向Ｘ座標差分
@    s16 V_DiffX                 垂直方向Ｘ座標差分
@    s16 H_DiffY               ライン方向Ｙ座標差分
@    s16 V_DiffY                 垂直方向Ｙ座標差分

@--------------------------------------------------------------------
@-                       Bit圧縮データ展開                          -
@--------------------------------------------------------------------

    .EXTERN BitUnPack

@・0固定のbitを詰めたデータを展開します。
@・デスティネーションアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@    r2:                     BitUnPackParam構造体データのアドレス
@
@・BitUnPackParam構造体
@    u16 SrcNum              ソースデータ・バイト数
@    u8  SrcBitNum           １ソースデータ・ビット数
@    u8  DestBitNum          １デスティネーションデータ・ビット数
@    u32 DestOffset:31       ソースデータに加算するオフセット数
@        DestOffset0_On:1    ０のデータにオフセットを加算するか否かのフラグ

@--------------------------------------------------------------------
@-                   ＬＺ７７圧縮データ展開（→ワークＲＡＭ）       -
@--------------------------------------------------------------------

    .EXTERN LZ77UnCompWram

@・LZ77圧縮データを展開し、8bit単位で書き込みます。
@・VRAMに直接展開することはできません。
@・圧縮データのサイズが4の倍数にならなかった場合は
@  出来るだけ0で詰めて調整して下さい。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 :4                  予約
@        CompType:4          圧縮タイプ（ = 1）
@        DestSize:24         展開後のデータサイズ
@
@・フラグデータフォーマット
@    u8  Flags               圧縮／無圧縮フラグ
@                            （0, 1） = （無圧縮データ, 圧縮データ）
@・コードデータフォーマット（Big Endian）
@    u16 Length:4            展開データ長 - 3（一致長3Byte以上時のみ圧縮）
@        Offset:12           一致データオフセット - 1

@--------------------------------------------------------------------
@-                   ＬＺ７７圧縮データ展開（→ＶＲＡＭ）           -
@--------------------------------------------------------------------

    .EXTERN LZ77UnCompVram

@・LZ77圧縮データを展開し、16bit単位で書き込みます。
@・ワークRAMにも展開できますが、LZ77UnCompWram()より低速です。
@・圧縮データは一致文字列を2Byte以前より検索したものにして下さい。
@・圧縮データのサイズが4の倍数にならなかった場合は
@  出来るだけ0で詰めて調整して下さい。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 :4                  予約
@        CompType:4          圧縮タイプ（ = 1）
@        DestSize:24         展開後のデータサイズ
@
@・フラグデータフォーマット
@    u8  Flags               圧縮／無圧縮フラグ
@                            （0, 1） = （無圧縮データ, 圧縮データ）
@・コードデータフォーマット（Big Endian）
@    u16 Length:4            展開データ長 - 3（一致長3Byte以上時のみ圧縮）
@        Offset:12           一致データオフセット（ >= 2） - 1

@--------------------------------------------------------------------
@-                   ハフマン圧縮データ展開                         -
@--------------------------------------------------------------------

    .EXTERN HuffUnComp

@・ハフマン圧縮データを展開し、32bit単位で書き込みます。
@・圧縮データのサイズが4の倍数にならなかった場合は
@  出来るだけ0で詰めて調整して下さい。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 BitSize:4           １データ・ビットサイズ（通常 4|8）
@        CompType:4          圧縮タイプ（ = 2）
@        DestSize:24         展開後のデータサイズ
@
@・ツリーテーブル
@    u8           TreeSize        ツリーテーブルサイズ/2 - 1
@    TreeNodeData RootNode        ルートノード
@
@    TreeNodeData LeftNode        ルート左ノード
@    TreeNodeData RightNode       ルート右ノード
@
@    TreeNodeData LeftleftNode    左左ノード
@    TreeNodeData leftRightNode   左右ノード
@
@    TreeNodeData RightLeftNode   右左ノード
@    TreeNodeData RightRightNode  右右ノード
@
@            ・
@            ・
@
@  この後に圧縮データ本体
@
@・TreeNodeData構造体
@    u8  NextNodeOffset:6    次ノードデータへのオフセット - 1（2Byte単位）
@        RightEndFlag:1      右ノード終了フラグ
@        LeftEndFlag:1       左ノード終了フラグ
@                            終了フラグがセットされている場合
@                            次ノードにデータがある

@--------------------------------------------------------------------
@-                   ランレングス圧縮データ展開（→ワークＲＡＭ）   -
@--------------------------------------------------------------------

    .EXTERN RLUnCompWram

@・ランレングス圧縮データを展開し、8bit単位で書き込みます。
@・VRAMに直接展開することはできません。
@・圧縮データのサイズが4の倍数にならなかった場合は
@  出来るだけ0で詰めて調整して下さい。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 :4                  予約
@        CompType:4          圧縮タイプ（ = 3）
@        DestSize:24         展開後のデータサイズ
@
@・フラグデータフォーマット
@    u8  Length:7            展開データ長 - 1（無圧縮時）
@                            展開データ長 - 3（連続長3Byte以上時のみ圧縮）
@        Flag:1              （0, 1） = （無圧縮データ, 圧縮データ）

@--------------------------------------------------------------------
@-                   ランレングス圧縮データ展開（→ＶＲＡＭ）       -
@--------------------------------------------------------------------

    .EXTERN RLUnCompVram

@・ランレングス圧縮データを展開し、16bit単位で書き込みます。
@・ワークRAMにも展開できますが、RLUnCompWram()より低速です。
@・圧縮データのサイズが4の倍数にならなかった場合は
@  出来るだけ0で詰めて調整して下さい。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 :4                  予約
@        CompType:4          圧縮タイプ（ = 3）
@        DestSize:24         展開後のデータサイズ
@
@・フラグデータフォーマット
@    u8  Length:7            展開データ長 - 1（無圧縮時）
@                            展開データ長 - 3（連続長3Byte以上時のみ圧縮）
@        Flag:1              （0, 1） = （無圧縮データ, 圧縮データ）

@--------------------------------------------------------------------
@-                   差分フィルタ展開（8Bit→ワークＲＡＭ）         -
@--------------------------------------------------------------------

    .EXTERN Diff8bitUnFilterWram

@・8bit差分フィルタ加工データを展開し、8bit単位で書き込みます。
@・VRAMに直接展開することはできません。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 ByteSize:4          １データ・バイトサイズ（ = 1）
@        FiltType:4          フィルタタイプ（ = 8）
@        DestSize:24         展開後のデータサイズ
@
@・データフォーマット
@    u8  Origin              元データ
@    u8  Diff                差分データ
@         ・
@         ・

@--------------------------------------------------------------------
@-                   差分フィルタ展開（8Bit→ＶＲＡＭ）             -
@--------------------------------------------------------------------

    .EXTERN Diff8bitUnFilterVram

@・8bit差分フィルタ加工データを展開し、16bit単位で書き込みます。
@・ワークRAMにも展開できますが、Diff8bitUnFilterVram()より低速です。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 ByteSize:4          １データ・バイトサイズ（ = 1）
@        FilterType:4        フィルタタイプ（ = 8）
@        DestSize:24         展開後のデータサイズ
@
@・データフォーマット
@    u8  Origin              元データ
@    u8  Diff                差分データ
@         ・
@         ・

@--------------------------------------------------------------------
@-                   差分フィルタ展開（16Bit）                      -
@--------------------------------------------------------------------

    .EXTERN Diff16bitUnFilter

@・16bit差分フィルタ加工データを展開し、16bit単位で書き込みます。
@・ソースアドレスは4Byte境界に合わせて下さい。
@
@・引数：
@    r0:                     ソースアドレス
@    r1:                     デスティネーションアドレス
@
@・データヘッダ
@    u32 ByteSize:4          １データ・バイトサイズ（ = 2）
@        FilterType:4        フィルタタイプ（ = 8）
@        DestSize:24         展開後のデータサイズ
@
@・データフォーマット
@    u16 Origin              元データ
@    u16 Diff                差分データ
@         ・
@         ・

@--------------------------------------------------------------------
@-              サウンドＢＩＡＳ セット                             -
@--------------------------------------------------------------------

    .EXTERN SoundBiasSet

@・サウンドBIASを0から中間値（0x200）へ移行します。

@--------------------------------------------------------------------
@-              サウンドＢＩＡＳ リセット                           -
@--------------------------------------------------------------------

    .EXTERN SoundBiasReset

@・サウンドBIASを中間値（0x200）から0へ移行します。

@--------------------------------------------------------------------
@-              サウンドドライバ 初期化                             -
@--------------------------------------------------------------------

    .EXTERN SoundDriverInit

@  サウンドドライバを初期化します。
@  ゲームの起動時に一度だけ呼んでください。
@  その際、作業領域である sa は、あらかじめ確保しておく
@  必要があります。尚、たとえ作業領域を別に用意しても、
@  本ドライバを多重に実行することは出来ません。

@--------------------------------------------------------------------
@-              サウンドドライバ 動作モード                         -
@--------------------------------------------------------------------

    .EXTERN SoundDriverMode

@  サウンドドライバの動作モードを設定します。
@  
@  ▼ダイレクトサウンドのリバーブ (初期値 0)
@      mode = SOUND_MODE_REVERB_SET + (リバーブ値 0〜127);
@  
@  ▼ダイレクトサウンドの同時発音数 (初期値 8)
@      mode = (同時発音数 1〜12) << SOUND_MODE_MAXCHN_SHIFT;
@  
@  ▼ダイレクトサウンドのマスターボリューム (初期値 15)
@      mode = (ボリューム 1〜15) << SOUND_MODE_MASVOL_SHIFT;
@  
@  ▼ダイレクトサウンドの再生周波数 (初期値 13379Hz)
@      mode = SOUND_MODE_FREQ_?????;
@             ↑ AgbSound.h で定義されている値。(１２種類)
@  
@  ▼最終的なＤ／Ａコンバータのビット数 (初期値 8bit)
@      mode = SOUND_MODE_DA_BIT_?;
@                            ↑ 9〜6
@  
@  ▲以上の値は、OR して一度に設定することもできます。

@--------------------------------------------------------------------
@-              サウンドドライバ メイン                             -
@--------------------------------------------------------------------

    .EXTERN SoundDriverMain

@  サウンドドライバのメイン。
@  1/60秒毎に呼んでください。処理の流れとしては、
@  V-Blank割込みの直後に後述の SoundDriverVSync() を呼び、
@  その後 BG や OBJ の処理を行ってから本ルーチンを
@  呼ぶことになります。

@--------------------------------------------------------------------
@-              サウンドドライバ ＤＭＡ再セット                     -
@--------------------------------------------------------------------

    .EXTERN SoundDriverVSync

@  サウンドＤＭＡを再セットする非常に短いシステムコールです。
@  タイミングがシビアですので、1/60秒毎の V-Blank の
@  割込みが入った『直後』に呼んでください。

@--------------------------------------------------------------------
@-              サウンドチャンネル クリア                           -
@--------------------------------------------------------------------

    .EXTERN SoundChannelClear

@  ダイレクトサウンドの全チャンネルをクリアし、音を止めます。
@  なおこの関数は、後日サウンドドライバ機能を拡張するライブラリを
@  組込んだ際に正常に動作しない恐れがありますので、その場合は使用
@  しないで下さい。

@--------------------------------------------------------------------
@-                 サウンドＤＭＡの停止                             -
@--------------------------------------------------------------------

    .EXTERN SoundDriverVSyncOff

@  メインプログラムの都合等で V-Blank割込みを停止する等、
@  1/60秒毎に SoundDriverVSync() を呼べなくなった場合には、
@  この関数を使ってサウンドＤＭＡを停止する必要があります。
@  さもないと、バッファをオーバーしてもＤＭＡが止まらずに、
@  ひどいノイズが発生します。

@--------------------------------------------------------------------
@-                 サウンドＤＭＡの再開                             -
@--------------------------------------------------------------------

    .EXTERN SoundDriverVSyncOn

@  上記の SoundDriverVSyncOff() にて停止したサウンドＤＭＡを
@  再開させる関数です。この関数をコールした後、2/60秒以内に
@  V-Blank 割込みが入り SoundDriverVSync() が呼ばれるように
@  してください。

@--------------------------------------------------------------------
@-               ＭＩＤＩキーによる音程計算                         -
@--------------------------------------------------------------------

    .EXTERN MidiKey2Freq

@  波形データ wa を、音程(MIDI KEY) mk および微調整値 fp で鳴らす時、
@  ((SoundArea)sa).vchn[x].fr に代入する値を計算します。


@--------------------------------------------------------------------
@-                   マルチプレイブート                             -
@--------------------------------------------------------------------

    .EXTERN MultiBoot

@・マルチプレイブートのサーバ用メイン処理です。
@・あらかじめ、接続されているすべてのクライアントAGBとの間で、
@  所定の認識手続きを行っておかなければなりません。


