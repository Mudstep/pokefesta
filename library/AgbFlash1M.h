/********************************************************************/
/*          AgbFlash.h                                              */
/*            1Mbit FLASHライブラリヘッダ   ver. 1.0.3              */
/*                                                                  */
/*                                         last modified 2002.07.12 */
/*                                                                  */
/*          Copyright (C) 2000-2001 NINTENDO Co.,Ltd.               */
/********************************************************************/
#ifndef __AGB_FLASH_1M_H__
#define __AGB_FLASH_1M_H__

#ifdef __cplusplus
extern "C" {
#endif



#ifndef __AGB_FLASH_512K_H__

#include <Agb.h>


// define data----------------------------------
#define FLASH_ADR           0x0e000000      // フラッシュ先頭アドレス
#define FLASH_RETRY_MAX     3               // ProgramFlashSectorEx関数リトライ回数上限


typedef struct flashSectorTag {
    u32         size;           // セクタサイズ
    u8          shift;          // セクタサイズをシフト数に換算した値
    u16         count;          // セクタ数
    u16         top;            // 使用可能先頭セクタ№
}flashSector;

typedef struct flashTypeTag {
    u32         romSize;        // ROMサイズ
    flashSector sector;         // セクタ情報(※上記flashSector参照。)
    u16         agbWait[2];     // AGBカートリッジバスのread/writeウェイト値
    u8          makerID;        // ベンダID
    u8          deviceID;       // デバイスID
}flashType;


/*------------------------------------------------------------------*/
/*          グローバル変数                                          */
/*------------------------------------------------------------------*/
extern const flashType *flash;  // フラッシュの構成内容を示すデータへのポインタ。
                                // （詳細は上記データ定義部参照)
extern u16 flash_remainder;     // フラッシュライト時の進捗を示すバロメータ
    // ※flash_remainderは、アトメル製フラッシュでは128ずつ減少し、
    //   その他のデバイスでは1ずつ減少します。

#endif	/*__AGB_FLASH_512K_H__*/


/*------------------------------------------------------------------*/
/*          デバイス識別および初期設定                              */
/*------------------------------------------------------------------*/

extern u16 IdentifyFlash_1M();

/*  フラッシュのIDを読み出し、どのフラッシュがカートリッジに搭載されて
    いるかを識別して、フラッシュの容量やセクタサイズの取得、アクセスス
    ピードの設定、更に対応するフラッシュ用の各アクセス関数のセットを行
    います。取得したフラッシュのデータはグローバル変数flashType *flash
    で参照することができます。（flashTypeの詳細は上記定義部を参照。)
    本関数はフラッシュにアクセスするより以前（リードも含めて）に１回コ
    ールします。
    デバイスを識別できなかった場合はエラーを返し、以下のアクセス関数は
    使用不可となります。
    ＜引数＞
    なし
    ＜戻り値＞
    u16 result  : 0で正常終了、0以外で識別エラー
*/


#ifndef __AGB_FLASH_512K_H__
/*------------------------------------------------------------------*/
/*          アクセス用タイマ割り込み設定                            */
/*------------------------------------------------------------------*/

extern u16 SetFlashTimerIntr(u8 timerNo, void (**IntrFunc)(void));

/*  フラッシュのアクセス時に使用するタイムアウト判定用のタイマ割り込み
    を選択します。
    ライブラリ関数EraseFlashChip、EraseFlashSector、ProgramFlashSecotrが
    呼ばれる前に最低１回はコールする必要があり、本ルーチンで使用するタイマ
    割り込みを一旦セットしたならば、セットした№のタイマ割り込みを他の処理
    で使用したり、別の割り込みテーブルを使用したりしない限り、本ルーチンを
    再度コールする必要はありません。
    timerNoが０～３以外の時はエラー。
    ※ライブラリの仕様上、本ルーチンのコール時に特定のタイマ割り込みルーチ
      ンを強制的にライブラリ関数のものにセットするため、フラッシュにアクセス
      する時点での割り込みテーブルはＲＡＭ領域にある必要があります。
    ＜引数＞
    u8 timerNo  : タイムアウトルーチンが使用するタイマーの番号
    void (**IntrFunc)(void): 割り込みテーブル内の対応するタイマ割り込みア
                             ドレスへのポインタ
    ＜戻り値＞
    u16 result  : 0で正常終了、0以外でパラメータエラー
*/

/*------------------------------------------------------------------*/
/*          データ読み出し                                          */
/*------------------------------------------------------------------*/

extern void ReadFlash(u16 secNo,u32 offset,u8 *dst,u32 size);

/*  フラッシュの対象セクタ№内におけるoffsetバイト先のアドレスから、size
    バイト分のデータをワークのdstアドレス以降に読み出します。
    ＜引数＞
    u16 secNo   : 対象セクタ№
    u32 offset  : セクタ内のバイト単位のオフセット
    u8 *dst     : リードしたデータを格納するワーク領域のアドレス
    u32 size    : バイト単位でのリードサイズ
    ＜戻り値＞
    なし
*/

/*------------------------------------------------------------------*/
/*          チップ消去                                              */
/*------------------------------------------------------------------*/

extern u16 (*EraseFlashChip)();

/*  チップ全体を完全にイレースします。
    ※SetFlashTimerIntrが事前にコールされている必要があります。
    ＜引数＞
    なし
    ＜戻り値＞
    u16 result  : 0で正常終了、0以外でイレースエラー
*/

/*------------------------------------------------------------------*/
/*          セクタ消去                                              */
/*------------------------------------------------------------------*/

extern u16 (*EraseFlashSector)(u16 secNo);

/*  対象セクタ№のセクタをイレースします。
    このルーチンは書込みルーチンの中でコールされるため、通常は書込み前
    にこのルーチンをコールする必要はありません。対象セクタ№が範囲外の
    時はエラーを返します。
    ※SetFlashTimerIntrが事前にコールされている必要があります。
    ＜引数＞
    u16 secNo   : 対象セクタ№
    ＜戻り値＞
    u16 result  : 0で正常終了、0以外でイレースエラー

    ※アトメル製フラッシュ使用時は、関数内で一定期間全ての割り込みが禁
      止されるため、注意して下さい。
      詳細については「AGBバックアップライブラリマニュアル」に記載の
      「Flashアクセス関数使用時の注意点」を参照して下さい。
      また、本関数コール時はダイレクトサウンドおよびＶ・Ｈブランク同期、
      表示同期、カートリッジリクエスト等の特定のタイミングで自動起動す
      るＤＭＡは使用しないで下さい。
*/

/*------------------------------------------------------------------*/
/*          バイト単位データ書き込み                                */
/*------------------------------------------------------------------*/

extern u16 (*ProgramFlashByte)(u16 secNo, u32 offset, u8 data);

/*  srcアドレスに１byteのデータを書き込みます。
    ※SetFlashTimerIntrが事前にコールされている必要があります。
    ＜引数＞
    u16 secNo    :対象セクタNo.
    u32 offset   :アドレスのオフセット
    u8  data     :書込むデータ
    ＜戻り値＞
    u16 result  : 0で正常終了、0以外でライトエラー
*/

/*------------------------------------------------------------------*/
/*          セクタ単位データ書き込み                                */
/*------------------------------------------------------------------*/

extern u16 (*ProgramFlashSector)(u16 secNo,u8 *src);

/*  srcアドレスから１セクタ分(4kbyte)のデータを対象セクタ№に書き込みます。
    本ルーチン内で上記のEraseFlashSectorをコールし、セクタを消去してから
    書込みを行います。
    対象セクタ№が範囲外の時はエラーを返します。
    本ルーチンの実行中、グローバル変数flash_remainderを参照することで、残
    バイト数を知ることができます。
    ※SetFlashTimerIntrが事前にコールされている必要があります。
    ＜引数＞
    u16 secNo   :対象セクタ№
    u8 *src    :書込み元アドレス
    ＜戻り値＞
    u16 result  : 0で正常終了、0以外でライトエラー

    ※アトメル製フラッシュ使用時は、関数内で一定期間全ての割り込みが禁
      止されるため、注意して下さい。
      詳細については「AGBバックアップライブラリマニュアル」に記載の
      「Flashアクセス関数使用時の注意点」を参照して下さい。
      また、本関数コール時はダイレクトサウンドおよびＶ・Ｈブランク同期、
      表示同期、カートリッジリクエスト等の特定のタイミングで自動起動す
      るＤＭＡは使用しないで下さい。
*/

/*------------------------------------------------------------------*/
/*          セクタ単位データベリファイ                              */
/*------------------------------------------------------------------*/

extern u32 VerifyFlashSector(u16 secNo,u8 *src);

/*  srcアドレスからのデータとフラッシュの対象セクタ№のデータを１セクタ
    分(4kbyte)ベリファイします。本関数は、ベリファイが正常に終了したな
    らば０を返し、ベリファイエラーがあったならばエラーの発生したアドレス
    を返します。
    ＜引数＞
    u16 secNo   : 対象セクタ№
    u8 *src     : ベリファイ元アドレス（オリジナルデータ）
    ＜戻り値＞
    u32 errorAdr: 0で正常終了、ベリファイエラー時はデバイス側エラーアドレス
                  を返します
*/

/*------------------------------------------------------------------*/
/*          バイト単位データベリファイ                              */
/*------------------------------------------------------------------*/

extern u32 VerifyFlash(u16 secNo,u8 *src,u32 size);

/*  srcアドレスからのデータとフラッシュの対象セクタ№のデータをsizeバイト
    分ベリファイします。本関数は、ベリファイが正常に終了したならば０を返し、
    ベリファイエラーがあったならばエラーの発生したアドレスを返します。
    ＜引数＞
    u16 secNo   : 対象セクタ№
    u8 *src     : ベリファイ元アドレス（オリジナルデータ）
    u32 size    : ベリファイサイズ(byte)
    ＜戻り値＞
    u32 errorAdr: 0で正常終了、ベリファイエラー時はデバイス側エラーアドレス
                  を返します
*/

/*------------------------------------------------------------------*/
/*          セクタ単位データ書き込み＆セクタ単位ベリファイ          */
/*------------------------------------------------------------------*/

extern u32 ProgramFlashSectorEx(u16 secNo,u8 *src);

/*  本関数は、内部でProgramFlashSectorで書き込みを行った後VeriyFlashSectorで
    ベリファイを行い、エラーの場合は最大でFLASH_RETRY_MAX(AgbFlash.hで定義）
    回リトライを行います。
    ※本関数では、ライトエラー時は32bit中の16bitでエラーコードを返しますが、
      ベリファイエラー時は32bitのデバイス側エラーアドレスを返しますので、エ
      ラーコード確認の際はご注意下さい。
    ＜引数＞
    u16 secNo   : 対象セクタ№
    u8 *src     : 書込み元アドレス
    ＜戻り値＞
    u32 result  : 0で正常終了
                  ライトエラー時は16bitのエラーコード
                  ベリファイエラー時はデバイス側エラーアドレス

    ※アトメル製フラッシュ使用時は、関数内で一定期間全ての割り込みが禁
      止されるため、注意して下さい。
      詳細については「AGBバックアップライブラリマニュアル」に記載の
      「Flashアクセス関数使用時の注意点」を参照して下さい。
       また、本関数コール時はダイレクトサウンドおよびＶ・Ｈブランク同期、
       表示同期、カートリッジリクエスト等の特定のタイミングで自動起動す
       るＤＭＡは使用しないで下さい。
*/

/*------------------------------------------------------------------*/
/*          セクタ単位データ書き込み＆バイト単位ベリファイ          */
/*------------------------------------------------------------------*/

extern u32 ProgramFlashSectorEx2(u16 secNo,u8 *src,u32 verifySize);

/*  本関数は、内部でProgramFlashSectorで書き込みを行った後VeriyFlashで
    verifySizeバイト分ベリファイを行います。
    エラーの場合は最大でFLASH_RETRY_MAX(AgbFlash.hで定義）回リトライを
    行います。
    ※本関数では、ライトエラー時は32bit中の16bitでエラーコードを返しま
      すが、ベリファイエラー時は32bitのデバイス側エラーアドレスを返しま
      すので、エラーコード確認の際はご注意下さい。
    ＜引数＞
    u16 secNo   : 対象セクタ№
    u8 *src     : 書込み元アドレス
    u32 verifySize : ベリファイサイズ（byte）
    ＜戻り値＞
    u32 result  : 0で正常終了
                  ライトエラー時は16bitのエラーコード
                  ベリファイエラー時はデバイス側エラーアドレス

    ※アトメル製フラッシュ使用時は、関数内で一定期間全ての割り込みが禁
      止されるため、注意して下さい。
      詳細については「AGBバックアップライブラリマニュアル」に記載の
      「Flashアクセス関数使用時の注意点」を参照して下さい。
       また、本関数コール時はダイレクトサウンドおよびＶ・Ｈブランク同期、
       表示同期、カートリッジリクエスト等の特定のタイミングで自動起動す
       るＤＭＡは使用しないで下さい。
*/

#endif	/*__AGB_FLASH_512K_H__*/


#ifdef __cplusplus
}      /* extern "C" */
#endif

#endif  // __AGB_FLASH_1M_H__
