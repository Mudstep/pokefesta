BEGIN{

	#=================================================================
	#
	#アイテム定義ファイル読み込み
	#
	#=================================================================
	ITEMSYM_H = "../data/itemsym.h"

	#getline = １行読み込み
	#１は戻り値
	while ( 1 == getline < ITEMSYM_H ) {
		if ( NF == 5 && $1 =="#define" ) {
			ItemName[$2] = $5
		}
	}
	close(ITEMSYM_H)

	#=================================================================
	#
	#隠しアイテムラベル定義生成
	#
	#=================================================================
	RS="{"			#レコード区切りを"{"にする	（通常は改行）
	FS="\n"			#フィールド区切りを改行にする	（通常はスペースorタブ）

	printf( "//sxyデータの「隠しアイテムラベル」定義 \n" )
	printf( "#include\t\"..\\data\\itemsym.h\"" )
	print ""
	print ""
}


$5 ~/BG_ITEMPICK/{

	symbol = tolower($6)		#小文字に統一
	sub(/,.*$/,"",symbol)		#","以降を削除
	sub(/^[\t ]*/,"",symbol)	#先頭のスペースやタブを削除

	#フラグナンバー
	symbol2 = symbol

	#--------------------------------------------------------------------
	#一言メモ
	#
	#[]はすでに一致が入っているので
	#[].とやるとおかしくなる
	#
	#--------------------------------------------------------------------
	sub(/^[^_]*/,"",symbol2)	#"_"と一致するまで削除
	sub(/[_]/,"",symbol2)		#"_"と一致したら削除

	#ラベル名ではなく、フラグのオフセットで同じものがないかチェックする
	if ( symbol2 in ID_List ) {

		#同じ数値を定義している個所がある場合
		printf("同じフラグを使用している所があります\n") >> "/dev/stderr"
		printf("[%s] [%s] \n",ID_List[symbol2],symbol) >> "/dev/stderr"
		printf("ERROR! %s\n",symbol)

		exit				#途中で終了

	}

	ID_List[symbol2] = symbol	#要素として登録


	#アイテムシンボル
	symbol3 = toupper(symbol)			#大文字に統一

	#--------------------------------------------------------------------
	#特殊(先頭が数字の場合)
	#--------------------------------------------------------------------
	if( symbol3 ~ "SP" )				#大文字でチェック
	{
		sub(/^[SP]./,"",symbol3)		#"SP"と一致したら削除
	}
	#--------------------------------------------------------------------

	sub(/_.*$/,"",symbol3)		#","以降を削除

	id = "(u8 *)( ITEM_" symbol3 " | (" symbol2 " << 16) )"


	#--------------------------------------------------------------------
	#下の処理の説明
	#--------------------------------------------------------------------
	#	/[^_]	_ではない文字までを消す		_item_kizugusuri
	#	*_		「 _ 」を消す				item_kizugusuri
	#	/[^_]*_[^_]*_/						kizugusuri
	#
	#hoge = "ev_item_kizugusuri"
	#sub( /[^_]*_[^_]*_/,"",hoge)
	#hoge = "kizugusuri"


	#--------------------------------------------------------------------
	#debug
	#--------------------------------------------------------------------
	#print symbol
	#print id


	#フラグマックスを超えていたらエラー(02/08/15 MAX = 99 )
	#文字列のためうまくいかないので
	#if( symbol2 > 99 ) 
	if( symbol2 == 100 ) 
	{
		printf("フラグの最大数を超えています！\n") >> "/dev/stderr"
		exit				#途中で終了
	}


	#定義を出力
	#EV_HIDE_ITEM( (u8 *)( symbol | (id << 16) ) )
	#EV_HIDE_ITEM( symbol, id )という形で出力してもよい

	sub(/^[\t ]*/,"",$2)	#先頭のスペースやタブを削除
	sub(/,.*$/,"",$2)		#","以降を削除
	sub(/^[\t ]*/,"",$3)	#先頭のスペースやタブを削除
	sub(/,.*$/,"",$3)		#","以降を削除

	print "#define \t" symbol "\t" id
	#printf( "//%s\n" ,ItemName["ITEM_" symbol3])
	print "//X = " $2 " Y = " $3 " map = 0 " ItemName["ITEM_" symbol3]
}


